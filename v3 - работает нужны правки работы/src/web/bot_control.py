#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–§–∞–π–ª: src/web/bot_control.py

–°–û–ó–î–ê–ô–¢–ï –≠–¢–û–¢ –§–ê–ô–õ: src/web/bot_control.py
"""

from flask import jsonify, request
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class BotController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    
    def __init__(self, bot_manager=None):
        self.bot_manager = bot_manager
        self.auto_trading = False
        self.trading_task = None
        logger.info("ü§ñ BotController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            if not self.bot_manager:
                return {
                    'status': 'error',
                    'is_running': False,
                    'message': 'Bot manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                    'active_pairs': [],
                    'open_positions': 0,
                    'trades_today': 0,
                    'cycles_count': 0,
                    'uptime': 0,
                    'auto_trading': self.auto_trading,
                    'timestamp': datetime.utcnow().isoformat()
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if hasattr(self.bot_manager, 'get_status'):
                try:
                    status = self.bot_manager.get_status()
                    if isinstance(status, dict):
                        # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        status.update({
                            'auto_trading': self.auto_trading,
                            'trading_task_active': self.trading_task is not None and not self.trading_task.done(),
                            'timestamp': datetime.utcnow().isoformat()
                        })
                        return status
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            
            # –ë–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
            return {
                'status': 'stopped',
                'is_running': False,
                'message': '–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç',
                'active_pairs': [],
                'open_positions': 0,
                'trades_today': 0,
                'cycles_count': 0,
                'uptime': 0,
                'auto_trading': self.auto_trading,
                'timestamp': datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'status': 'error',
                'is_running': False,
                'message': f'–û—à–∏–±–∫–∞: {str(e)}',
                'active_pairs': [],
                'open_positions': 0,
                'trades_today': 0,
                'cycles_count': 0,
                'uptime': 0,
                'auto_trading': self.auto_trading,
                'timestamp': datetime.utcnow().isoformat()
            }
    
    async def start_bot(self, pairs: list = None, strategy: str = 'auto') -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ü–∞—Ä—ã: {pairs}, –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")
            
            if not self.bot_manager:
                return {'success': False, 'message': 'Bot manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
            if self.auto_trading and self.trading_task and not self.trading_task.done():
                return {'success': False, 'message': '–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω'}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if pairs:
                await self._update_trading_pairs(pairs)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞–¥–∞—á—É
            self.auto_trading = True
            self.trading_task = asyncio.create_task(self._trading_loop())
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return {'success': True, 'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            self.auto_trading = False
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}'}
    
    async def stop_bot(self) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        try:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            
            self.auto_trading = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞–¥–∞—á—É
            if self.trading_task and not self.trading_task.done():
                self.trading_task.cancel()
                try:
                    await self.trading_task
                except asyncio.CancelledError:
                    pass
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
            if self.bot_manager and hasattr(self.bot_manager, 'close_all_positions'):
                try:
                    await self.bot_manager.close_all_positions()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return {'success': True, 'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}'}
    
    async def restart_bot(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            await self.stop_bot()
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –∑–∞–ø—É—Å–∫–æ–º
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            result = await self.start_bot()
            
            if result['success']:
                return {'success': True, 'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω'}
            else:
                return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {result["message"]}'}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}'}
    
    async def _trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        logger.info("üìà –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while self.auto_trading:
                try:
                    # 1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                    market_data = await self.analyze_market()
                    
                    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
                    signals = await self.generate_signals(market_data)
                    
                    # 3. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
                    if signals:
                        await self.execute_trades(signals)
                    
                    # 4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
                    await self.manage_positions()
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
                    
                except asyncio.CancelledError:
                    logger.info("–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                    await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    
        except asyncio.CancelledError:
            logger.info("–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
        finally:
            self.auto_trading = False
            logger.info("üìà –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def analyze_market(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...")
        
        if self.bot_manager and hasattr(self.bot_manager, 'analyze_market'):
            try:
                return await self.bot_manager.analyze_market()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
        
        # –ë–∞–∑–æ–≤–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
        await asyncio.sleep(1)
        return {'trend': 'neutral', 'volatility': 'medium', 'signals': []}
    
    async def generate_signals(self, market_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã...")
        
        if self.bot_manager and hasattr(self.bot_manager, 'generate_signals'):
            try:
                return await self.bot_manager.generate_signals(market_data)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        await asyncio.sleep(1)
        return []
    
    async def execute_trades(self, signals):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫"""
        logger.info(f"üíº –ò—Å–ø–æ–ª–Ω—è–µ–º {len(signals)} —Å–¥–µ–ª–æ–∫...")
        
        if self.bot_manager and hasattr(self.bot_manager, 'execute_trades'):
            try:
                return await self.bot_manager.execute_trades(signals)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        await asyncio.sleep(1)
    
    async def manage_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        logger.info("‚öñÔ∏è –£–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—è–º–∏...")
        
        if self.bot_manager and hasattr(self.bot_manager, 'manage_positions'):
            try:
                return await self.bot_manager.manage_positions()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏: {e}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await asyncio.sleep(1)
    
    async def _update_trading_pairs(self, pairs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            if self.bot_manager and hasattr(self.bot_manager, 'update_pairs'):
                await self.bot_manager.update_pairs(pairs)
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä: {e}")


def register_bot_control_routes(app, bot_manager=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    """
    logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º...")
    
    bot_controller = BotController(bot_manager)
    
    @app.route('/api/bot/status')
    def get_bot_status_action():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            status = bot_controller.get_status()
            return jsonify(status)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return jsonify({
                'status': 'error',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }), 500
    
    @app.route('/api/bot/start', methods=['POST'])
    def start_bot_action():
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            data = request.get_json() or {}
            pairs = data.get('pairs', ['BTCUSDT', 'ETHUSDT'])
            strategy = data.get('strategy', 'auto')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(
                    bot_controller.start_bot(pairs, strategy)
                )
                return jsonify(result)
            finally:
                loop.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—É—Å–∫–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/stop', methods=['POST'])
    def stop_bot_action():
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(
                    bot_controller.stop_bot()
                )
                return jsonify(result)
            finally:
                loop.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/restart', methods=['POST'])
    def restart_bot_action():
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(
                    bot_controller.restart_bot()
                )
                return jsonify(result)
            finally:
                loop.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/bot/config', methods=['GET', 'POST'])
    def bot_config_action():
        """–ü–æ–ª—É—á–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
        if request.method == 'GET':
            try:
                config = {
                    'auto_trading': bot_controller.auto_trading,
                    'active_pairs': getattr(bot_controller.bot_manager, 'active_pairs', []),
                    'max_positions': 1,  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    'risk_level': 'medium',
                    'strategy': 'auto'
                }
                return jsonify(config)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return jsonify({'error': str(e)}), 500
        
        elif request.method == 'POST':
            try:
                data = request.get_json() or {}
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {data}")
                return jsonify({'success': True, 'message': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞'})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return jsonify({'error': str(e)}), 500
    
    logger.info("‚úÖ –†–æ—É—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    return bot_controller


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = ['BotController', 'register_bot_control_routes']