"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–π Bybit
–ü—É—Ç—å: src/exchange/client.py

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Bybit API:
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
- –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
import hmac
import hashlib
import time
import json

import aiohttp
import pandas as pd
from pybit.unified_trading import HTTP
from pybit.exceptions import InvalidRequestError, FailedRequestError

from ..core.config import config
from ..core.exceptions import ExchangeError

logger = logging.getLogger(__name__)


class ExchangeClient:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - Spot –∏ Futures —Ç–æ—Ä–≥–æ–≤–ª—é
    - Testnet –∏ Mainnet
    - –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.api_key = config.BYBIT_API_KEY
        self.api_secret = config.BYBIT_API_SECRET
        self.testnet = config.BYBIT_TESTNET
        
        # –ë–∞–∑–æ–≤—ã–µ URL
        if self.testnet:
            self.base_url = "https://api-testnet.bybit.com"
            self.ws_url = "wss://stream-testnet.bybit.com"
        else:
            self.base_url = "https://api.bybit.com"
            self.ws_url = "wss://stream.bybit.com"
        
        # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç pybit
        try:
            self.client = HTTP(
                testnet=self.testnet,
                api_key=self.api_key,
                api_secret=self.api_secret
            )
            logger.info(f"‚úÖ Bybit –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({'TESTNET' if self.testnet else 'MAINNET'})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise ExchangeError(f"Failed to initialize Bybit client: {e}")
        
        # –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._symbol_info_cache = {}
        self._balance_cache = {}
        self._cache_ttl = 60  # —Å–µ–∫—É–Ω–¥
        
        # –õ–∏–º–∏—Ç—ã API
        self.rate_limits = {
            'orders': 10,      # –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
            'data': 50,        # –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ–∫—É–Ω–¥—É
            'account': 5       # –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥—É
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è rate limiting
        self._request_counters = {}
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            response = self.client.get_server_time()
            
            if response['retCode'] == 0:
                server_time = datetime.fromtimestamp(int(response['result']['timeSecond']))
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit —É—Å–ø–µ—à–Ω–æ. –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {server_time}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response['retMsg']}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit: {e}")
            return False
    
    async def fetch_balance(self, coin: str = "USDT") -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            coin: –í–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            
        Returns:
            Dict —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ {total, free, locked}
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"balance_{coin}"
            if self._is_cache_valid(cache_key):
                return self._balance_cache[cache_key]
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            response = self.client.get_wallet_balance(
                accountType="UNIFIED",
                coin=coin
            )
            
            if response['retCode'] != 0:
                raise ExchangeError(f"Failed to fetch balance: {response['retMsg']}")
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            coin_data = None
            for account in response['result']['list']:
                for coin_info in account['coin']:
                    if coin_info['coin'] == coin:
                        coin_data = coin_info
                        break
            
            if not coin_data:
                return {'total': 0.0, 'free': 0.0, 'locked': 0.0}
            
            balance = {
                'total': float(coin_data.get('walletBalance', 0)),
                'free': float(coin_data.get('availableToWithdraw', 0)),
                'locked': float(coin_data.get('locked', 0))
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._balance_cache[cache_key] = balance
            self._balance_cache[f"{cache_key}_timestamp"] = time.time()
            
            logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å {coin}: {balance}")
            return balance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            raise ExchangeError(f"Failed to fetch balance: {e}")
    
    async def fetch_ticker(self, symbol: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ —Ç–∏–∫–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            
        Returns:
            Dict —Å —Ü–µ–Ω–∞–º–∏ {last, bid, ask, volume}
        """
        try:
            response = self.client.get_tickers(
                category="spot",
                symbol=symbol
            )
            
            if response['retCode'] != 0:
                raise ExchangeError(f"Failed to fetch ticker: {response['retMsg']}")
            
            if not response['result']['list']:
                raise ExchangeError(f"No ticker data for {symbol}")
            
            ticker_data = response['result']['list'][0]
            
            ticker = {
                'symbol': symbol,
                'last': float(ticker_data['lastPrice']),
                'bid': float(ticker_data['bid1Price']),
                'ask': float(ticker_data['ask1Price']),
                'volume': float(ticker_data['volume24h']),
                'high': float(ticker_data['highPrice24h']),
                'low': float(ticker_data['lowPrice24h']),
                'change': float(ticker_data['price24hPcnt']) * 100  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            }
            
            logger.debug(f"üìä –¢–∏–∫–µ—Ä {symbol}: ${ticker['last']:.2f}")
            return ticker
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
            raise ExchangeError(f"Failed to fetch ticker: {e}")
    
    async def fetch_ohlcv(self, symbol: str, interval: str = "5", limit: int = 200) -> List[List]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π OHLCV
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π (1, 3, 5, 15, 30, 60, 120, 240, 360, 720, D, W, M)
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            
        Returns:
            List of [timestamp, open, high, low, close, volume]
        """
        try:
            response = self.client.get_kline(
                category="spot",
                symbol=symbol,
                interval=interval,
                limit=limit
            )
            
            if response['retCode'] != 0:
                raise ExchangeError(f"Failed to fetch OHLCV: {response['retMsg']}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            ohlcv = []
            for candle in response['result']['list']:
                ohlcv.append([
                    int(candle[0]),      # timestamp
                    float(candle[1]),    # open
                    float(candle[2]),    # high
                    float(candle[3]),    # low
                    float(candle[4]),    # close
                    float(candle[5])     # volume
                ])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
            ohlcv.sort(key=lambda x: x[0])
            
            logger.debug(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(ohlcv)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return ohlcv
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–ª—è {symbol}: {e}")
            raise ExchangeError(f"Failed to fetch OHLCV: {e}")
    
    async def place_order(
        self,
        symbol: str,
        side: str,
        order_type: str,
        amount: float,
        price: Optional[float] = None,
        stop_loss: Optional[float] = None,
        take_profit: Optional[float] = None,
        time_in_force: str = "GTC"
    ) -> Dict[str, Any]:
        """
        –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: Buy –∏–ª–∏ Sell
            order_type: Market –∏–ª–∏ Limit
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            stop_loss: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            take_profit: –£—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            time_in_force: GTC, IOC, FOK
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limits
            if not await self._check_rate_limit('orders'):
                await asyncio.sleep(0.5)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            symbol_info = await self.get_symbol_info(symbol)
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            amount = self._round_quantity(amount, symbol_info)
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                "category": "spot",
                "symbol": symbol,
                "side": side,
                "orderType": order_type,
                "qty": str(amount),
                "timeInForce": time_in_force
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            if order_type.upper() == "LIMIT" and price:
                price = self._round_price(price, symbol_info)
                order_params["price"] = str(price)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            response = self.client.place_order(**order_params)
            
            if response['retCode'] != 0:
                raise ExchangeError(f"Failed to place order: {response['retMsg']}")
            
            order_info = response['result']
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {side} {amount} {symbol} @ "
                       f"{'MARKET' if order_type == 'Market' else price}")
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã SL/TP, —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
            if stop_loss or take_profit:
                await self._place_sl_tp_orders(
                    symbol, side, amount, stop_loss, take_profit, order_info['orderId']
                )
            
            return {
                'order_id': order_info['orderId'],
                'symbol': symbol,
                'side': side,
                'type': order_type,
                'amount': amount,
                'price': price,
                'status': order_info['orderStatus'],
                'created_at': datetime.now()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            raise ExchangeError(f"Failed to place order: {e}")
    
    async def cancel_order(self, symbol: str, order_id: str) -> bool:
        """
        –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            order_id: ID –æ—Ä–¥–µ—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω
        """
        try:
            response = self.client.cancel_order(
                category="spot",
                symbol=symbol,
                orderId=order_id
            )
            
            if response['retCode'] == 0:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä: {response['retMsg']}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            return False
    
    async def get_order_status(self, symbol: str, order_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            order_id: ID –æ—Ä–¥–µ—Ä–∞
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
        """
        try:
            response = self.client.get_open_orders(
                category="spot",
                symbol=symbol,
                orderId=order_id
            )
            
            if response['retCode'] != 0:
                raise ExchangeError(f"Failed to get order status: {response['retMsg']}")
            
            if not response['result']['list']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
                response = self.client.get_order_history(
                    category="spot",
                    symbol=symbol,
                    orderId=order_id,
                    limit=1
                )
                
                if not response['result']['list']:
                    raise ExchangeError(f"Order {order_id} not found")
            
            order_data = response['result']['list'][0]
            
            return {
                'order_id': order_data['orderId'],
                'status': order_data['orderStatus'],
                'filled': float(order_data.get('cumExecQty', 0)),
                'remaining': float(order_data.get('leavesQty', 0)),
                'average_price': float(order_data.get('avgPrice', 0)),
                'created_at': datetime.fromtimestamp(int(order_data['createdTime']) / 1000)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: {e}")
            raise ExchangeError(f"Failed to get order status: {e}")
    
    async def get_positions(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        
        Returns:
            List –ø–æ–∑–∏—Ü–∏–π
        """
        try:
            # –î–ª—è spot —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –±–∞–ª–∞–Ω—Å–æ–º
            response = self.client.get_wallet_balance(
                accountType="UNIFIED"
            )
            
            if response['retCode'] != 0:
                raise ExchangeError(f"Failed to get positions: {response['retMsg']}")
            
            positions = []
            
            for account in response['result']['list']:
                for coin_info in account['coin']:
                    balance = float(coin_info.get('walletBalance', 0))
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –º–∞–ª—ã–µ –±–∞–ª–∞–Ω—Å—ã
                    if coin_info['coin'] in ['USDT', 'USDC', 'BUSD'] or balance < 0.00001:
                        continue
                    
                    positions.append({
                        'symbol': f"{coin_info['coin']}USDT",
                        'amount': balance,
                        'value': float(coin_info.get('usdValue', 0)),
                        'pnl': float(coin_info.get('unrealisedPnl', 0))
                    })
            
            return positions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            raise ExchangeError(f"Failed to get positions: {e}")
    
    async def get_symbol_info(self, symbol: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if symbol in self._symbol_info_cache:
                return self._symbol_info_cache[symbol]
            
            response = self.client.get_instruments_info(
                category="spot",
                symbol=symbol
            )
            
            if response['retCode'] != 0:
                raise ExchangeError(f"Failed to get symbol info: {response['retMsg']}")
            
            if not response['result']['list']:
                raise ExchangeError(f"Symbol {symbol} not found")
            
            info_data = response['result']['list'][0]
            
            symbol_info = {
                'symbol': symbol,
                'base_asset': info_data['baseCoin'],
                'quote_asset': info_data['quoteCoin'],
                'min_qty': float(info_data['lotSizeFilter']['minOrderQty']),
                'max_qty': float(info_data['lotSizeFilter']['maxOrderQty']),
                'qty_step': float(info_data['lotSizeFilter']['basePrecision']),
                'min_price': float(info_data['priceFilter']['minPrice']),
                'max_price': float(info_data['priceFilter']['maxPrice']),
                'price_step': float(info_data['priceFilter']['tickSize']),
                'min_notional': float(info_data.get('minNotional', 10))  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._symbol_info_cache[symbol] = symbol_info
            
            return symbol_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {symbol}: {e}")
            raise ExchangeError(f"Failed to get symbol info: {e}")
    
    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    def _round_quantity(self, quantity: float, symbol_info: Dict) -> float:
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –±–∏—Ä–∂–∏"""
        step = symbol_info['qty_step']
        return round(quantity / step) * step
    
    def _round_price(self, price: float, symbol_info: Dict) -> float:
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –±–∏—Ä–∂–∏"""
        step = symbol_info['price_step']
        return round(price / step) * step
    
    def _is_cache_valid(self, cache_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        timestamp_key = f"{cache_key}_timestamp"
        if timestamp_key in self._balance_cache:
            age = time.time() - self._balance_cache[timestamp_key]
            return age < self._cache_ttl
        return False
    
    async def _check_rate_limit(self, category: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit"""
        now = time.time()
        key = f"{category}_{int(now)}"
        
        if key not in self._request_counters:
            self._request_counters[key] = 0
        
        self._request_counters[key] += 1
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        old_keys = [k for k in self._request_counters if int(k.split('_')[1]) < now - 60]
        for k in old_keys:
            del self._request_counters[k]
        
        return self._request_counters[key] <= self.rate_limits.get(category, 10)
    
    async def _place_sl_tp_orders(
        self, 
        symbol: str, 
        side: str, 
        amount: float,
        stop_loss: Optional[float], 
        take_profit: Optional[float],
        parent_order_id: str
    ):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç"""
        try:
            # –î–ª—è spot —Ç–æ—Ä–≥–æ–≤–ª–∏ SL/TP —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è —á–µ—Ä–µ–∑ —É—Å–ª–æ–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
            
            if stop_loss:
                logger.info(f"‚ö†Ô∏è Stop-loss –¥–ª—è spot –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            
            if take_profit:
                logger.info(f"‚ö†Ô∏è Take-profit –¥–ª—è spot –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SL/TP: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
exchange_client = ExchangeClient()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
__all__ = ['ExchangeClient', 'exchange_client']