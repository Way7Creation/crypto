"""
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
–ü—É—Ç—å: src/bot/trader.py

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
- –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
"""

import logging
from typing import Dict, Optional, Tuple, Any
from datetime import datetime
import asyncio

from ..core.exceptions import ExchangeError, InsufficientBalanceError
from ..core.models import Trade, TradeStatus, OrderSide
from ..exchange.client import ExchangeClient

logger = logging.getLogger(__name__)


class Trader:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å:
    - –ü—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
    - –†–∞—Å—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    - –£—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–∞—â–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    - –û–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    
    def __init__(self, exchange: ExchangeClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞
        
        Args:
            exchange: –ö–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
        """
        self.exchange = exchange
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.min_order_value = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ –≤ USDT
        self.max_slippage = 0.5      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ %
        self.order_timeout = 30       # –¢–∞–π–º–∞—É—Ç –æ—Ä–¥–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        logger.info("‚úÖ Trader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def execute_buy(
        self,
        symbol: str,
        amount: float,
        price: Optional[float] = None,
        stop_loss: Optional[float] = None,
        take_profit: Optional[float] = None,
        order_type: str = "MARKET"
    ) -> Dict[str, Any]:
        """
        –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            stop_loss: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            take_profit: –£—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (MARKET/LIMIT)
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
            
        Raises:
            ExchangeError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            InsufficientBalanceError: –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
        """
        try:
            logger.info(f"üõí –ò—Å–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É {amount} {symbol}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balance_check = await self._check_balance_for_buy(symbol, amount, price)
            if not balance_check[0]:
                raise InsufficientBalanceError(balance_check[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
            order_value = amount * (price if price else await self._get_current_price(symbol))
            if order_value < self.min_order_value:
                raise ExchangeError(f"Order value {order_value:.2f} USDT is below minimum {self.min_order_value}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order_result = await self.exchange.place_order(
                symbol=symbol,
                side="Buy",
                order_type=order_type,
                amount=amount,
                price=price,
                stop_loss=stop_loss,
                take_profit=take_profit
            )
            
            # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ market –æ—Ä–¥–µ—Ä
            if order_type == "MARKET":
                await self._wait_for_order_fill(symbol, order_result['order_id'])
            
            logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: {order_result['order_id']}")
            return order_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ {symbol}: {e}")
            raise
    
    async def execute_sell(
        self,
        symbol: str,
        amount: float,
        price: Optional[float] = None,
        order_type: str = "MARKET"
    ) -> Dict[str, Any]:
        """
        –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ (MARKET/LIMIT)
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
            
        Raises:
            ExchangeError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            logger.info(f"üí∞ –ò—Å–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É {amount} {symbol}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            position_check = await self._check_position_for_sell(symbol, amount)
            if not position_check[0]:
                raise ExchangeError(position_check[1])
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order_result = await self.exchange.place_order(
                symbol=symbol,
                side="Sell",
                order_type=order_type,
                amount=amount,
                price=price
            )
            
            # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ market –æ—Ä–¥–µ—Ä
            if order_type == "MARKET":
                await self._wait_for_order_fill(symbol, order_result['order_id'])
            
            logger.info(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: {order_result['order_id']}")
            return order_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ {symbol}: {e}")
            raise
    
    async def close_position(
        self,
        trade: Trade,
        reason: str = "Manual close"
    ) -> Tuple[bool, Dict[str, Any]]:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            trade: –û–±—ä–µ–∫—Ç —Å–¥–µ–ª–∫–∏
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            
        Returns:
            Tuple[—É—Å–ø–µ—Ö, —Ä–µ–∑—É–ª—å—Ç–∞—Ç]
        """
        try:
            logger.info(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {trade.symbol}: {reason}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = "Sell" if trade.side == OrderSide.BUY else "Buy"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = await self._get_current_price(trade.symbol)
            
            # –†–∞–∑–º–µ—â–∞–µ–º market –æ—Ä–¥–µ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            order_result = await self.exchange.place_order(
                symbol=trade.symbol,
                side=close_side,
                order_type="MARKET",
                amount=trade.quantity
            )
            
            # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            filled_order = await self._wait_for_order_fill(
                trade.symbol, 
                order_result['order_id']
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
            exit_price = filled_order.get('average_price', current_price)
            
            if trade.side == OrderSide.BUY:
                profit = (exit_price - trade.entry_price) * trade.quantity
            else:
                profit = (trade.entry_price - exit_price) * trade.quantity
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é (–ø—Ä–∏–º–µ—Ä–Ω–æ 0.1%)
            commission = trade.quantity * exit_price * 0.001
            profit -= commission
            
            result = {
                'order_id': order_result['order_id'],
                'exit_price': exit_price,
                'profit': profit,
                'profit_percent': (profit / (trade.entry_price * trade.quantity)) * 100,
                'commission': commission,
                'reason': reason
            }
            
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é: ${profit:.2f} ({result['profit_percent']:.2f}%)")
            return True, result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False, {'error': str(e)}
    
    async def calculate_position_size(
        self,
        symbol: str,
        capital: float,
        risk_percent: float = 1.0,
        stop_loss_price: Optional[float] = None,
        entry_price: Optional[float] = None
    ) -> float:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            capital: –î–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
            risk_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
            stop_loss_price: –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            
        Returns:
            float: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
            symbol_info = await self.exchange.get_symbol_info(symbol)
            
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞, –±–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é
            if not entry_price:
                entry_price = await self._get_current_price(symbol)
            
            # –ú–µ—Ç–æ–¥ 1: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
            if not stop_loss_price:
                # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
                position_value = capital * (risk_percent / 100)
                position_size = position_value / entry_price
            else:
                # –ú–µ—Ç–æ–¥ 2: –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
                # –†–∏—Å–∫ = (Entry - StopLoss) * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                risk_per_unit = abs(entry_price - stop_loss_price)
                max_risk = capital * (risk_percent / 100)
                position_size = max_risk / risk_per_unit
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            # 1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            min_size = symbol_info['min_qty']
            if position_size < min_size:
                logger.warning(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_size}")
                return 0.0
            
            # 2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            max_size = symbol_info['max_qty']
            if position_size > max_size:
                position_size = max_size
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
            order_value = position_size * entry_price
            if order_value < self.min_order_value:
                position_size = self.min_order_value / entry_price
            
            # 4. –û–∫—Ä—É–≥–ª—è–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –±–∏—Ä–∂–∏
            step = symbol_info['qty_step']
            position_size = round(position_size / step) * step
            
            logger.debug(f"üìè –†–∞—Å—Å—á–∏—Ç–∞–Ω —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size} {symbol} "
                        f"(${position_size * entry_price:.2f})")
            
            return position_size
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0
    
    async def update_stop_loss(
        self,
        trade: Trade,
        new_stop_loss: float
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (trailing stop)
        
        Args:
            trade: –°–¥–µ–ª–∫–∞
            new_stop_loss: –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            logger.info(f"üìà –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {trade.symbol}: "
                       f"{trade.stop_loss:.2f} -> {new_stop_loss:.2f}")
            
            # –í spot —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ trailing stop
            # –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã
            # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            
            logger.warning("‚ö†Ô∏è Trailing stop –¥–ª—è spot —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            return False
    
    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        ticker = await self.exchange.fetch_ticker(symbol)
        return ticker['last']
    
    async def _check_balance_for_buy(
        self, 
        symbol: str, 
        amount: float,
        price: Optional[float] = None
    ) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
            balance = await self.exchange.fetch_balance("USDT")
            available = balance['free']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            if not price:
                price = await self._get_current_price(symbol)
            
            # –°—á–∏—Ç–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
            required = amount * price * 1.002  # +0.2% –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            
            if available >= required:
                return True, f"Balance OK: {available:.2f} USDT available"
            else:
                return False, f"Insufficient balance: need {required:.2f} USDT, have {available:.2f}"
                
        except Exception as e:
            return False, f"Balance check error: {e}"
    
    async def _check_position_for_sell(
        self, 
        symbol: str, 
        amount: float
    ) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
            symbol_info = await self.exchange.get_symbol_info(symbol)
            base_asset = symbol_info['base_asset']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
            balance = await self.exchange.fetch_balance(base_asset)
            available = balance['free']
            
            if available >= amount:
                return True, f"Position OK: {available:.8f} {base_asset} available"
            else:
                return False, f"Insufficient position: need {amount:.8f} {base_asset}, have {available:.8f}"
                
        except Exception as e:
            return False, f"Position check error: {e}"
    
    async def _wait_for_order_fill(
        self, 
        symbol: str, 
        order_id: str,
        timeout: Optional[int] = None
    ) -> Dict[str, Any]:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        timeout = timeout or self.order_timeout
        start_time = asyncio.get_event_loop().time()
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                order_status = await self.exchange.get_order_status(symbol, order_id)
                
                if order_status['status'] in ['Filled', 'PartiallyFilled']:
                    return order_status
                
                if order_status['status'] in ['Cancelled', 'Rejected']:
                    raise ExchangeError(f"Order {order_id} was {order_status['status']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if asyncio.get_event_loop().time() - start_time > timeout:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä
                    await self.exchange.cancel_order(symbol, order_id)
                    raise ExchangeError(f"Order {order_id} timeout")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(0.5)
                
            except Exception as e:
                logger.error(f"Error waiting for order fill: {e}")
                raise


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
__all__ = ['Trader']