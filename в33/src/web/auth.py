"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
–ü—É—Ç—å: src/web/auth.py

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤
- –ó–∞—â–∏—Ç—É –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
- Middleware –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
"""

import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from fastapi import Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.orm import Session
from sqlalchemy import and_, desc

from ..core.config import config
from ..core.database import get_db
from ..core.models import User, LoginAttempt

logger = logging.getLogger(__name__)

# ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====

# –ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è JWT
ALGORITHM = "HS256"

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–æ–≤
ACCESS_TOKEN_EXPIRE_MINUTES = 30
REFRESH_TOKEN_EXPIRE_DAYS = 7

# –ó–∞—â–∏—Ç–∞ –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
MAX_LOGIN_ATTEMPTS = 5
BLOCK_DURATION_MINUTES = 30
LOGIN_ATTEMPT_WINDOW_MINUTES = 15

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò =====

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# OAuth2 —Å—Ö–µ–º–∞
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/login")


# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–ê–†–û–õ–Ø–ú–ò =====

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    
    Args:
        plain_password: –ü–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        hashed_password: –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
    """
    try:
        return pwd_context.verify(plain_password, hashed_password)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
        return False


def get_password_hash(password: str) -> str:
    """
    –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    
    Args:
        password: –ü–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        
    Returns:
        str: –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    """
    return pwd_context.hash(password)


# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° JWT =====

def create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ JWT access —Ç–æ–∫–µ–Ω–∞
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω
        expires_delta: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        
    Returns:
        str: JWT —Ç–æ–∫–µ–Ω
    """
    to_encode = data.copy()
    
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire, "type": "access"})
    
    encoded_jwt = jwt.encode(to_encode, config.SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def create_refresh_token(data: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ JWT refresh —Ç–æ–∫–µ–Ω–∞
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω
        
    Returns:
        str: JWT refresh —Ç–æ–∫–µ–Ω
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
    
    to_encode.update({"exp": expire, "type": "refresh"})
    
    encoded_jwt = jwt.encode(to_encode, config.SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def decode_token(token: str) -> Dict[str, Any]:
    """
    –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    
    Args:
        token: JWT —Ç–æ–∫–µ–Ω
        
    Returns:
        Dict: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
    Raises:
        HTTPException: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
    """
    try:
        payload = jwt.decode(token, config.SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )


# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =====

def get_user(db: Session, username: str) -> Optional[User]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    
    Args:
        db: –°–µ—Å—Å–∏—è –ë–î
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        User –∏–ª–∏ None
    """
    return db.query(User).filter(User.username == username).first()


def get_user_by_email(db: Session, email: str) -> Optional[User]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    
    Args:
        db: –°–µ—Å—Å–∏—è –ë–î
        email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        User –∏–ª–∏ None
    """
    return db.query(User).filter(User.email == email).first()


def authenticate_user(db: Session, username: str, password: str) -> Optional[User]:
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        db: –°–µ—Å—Å–∏—è –ë–î
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
        
    Returns:
        User –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ None
    """
    user = get_user(db, username)
    
    if not user:
        return None
    
    if not verify_password(password, user.hashed_password):
        return None
    
    return user


# ===== –ó–ê–©–ò–¢–ê –û–¢ –ë–†–£–¢–§–û–†–°–ê =====

def check_login_attempts(db: Session, username: str, ip_address: Optional[str] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
    
    Args:
        db: –°–µ—Å—Å–∏—è –ë–î
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ip_address: IP –∞–¥—Ä–µ—Å
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    """
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫
    time_window = datetime.utcnow() - timedelta(minutes=LOGIN_ATTEMPT_WINDOW_MINUTES)
    
    # –°—á–∏—Ç–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    attempts_query = db.query(LoginAttempt).filter(
        and_(
            LoginAttempt.username == username,
            LoginAttempt.timestamp >= time_window,
            LoginAttempt.success == False
        )
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å IP, —É—á–∏—Ç—ã–≤–∞–µ–º –∏ –µ–≥–æ
    if ip_address:
        attempts_query = attempts_query.filter(
            LoginAttempt.ip_address == ip_address
        )
    
    failed_attempts = attempts_query.count()
    
    if failed_attempts >= MAX_LOGIN_ATTEMPTS:
        logger.warning(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –¥–ª—è {username} (IP: {ip_address})")
        return False
    
    return True


def record_login_attempt(
    db: Session, 
    username: str, 
    success: bool, 
    ip_address: Optional[str] = None
) -> None:
    """
    –ó–∞–ø–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
    
    Args:
        db: –°–µ—Å—Å–∏—è –ë–î
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success: –£—Å–ø–µ—à–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –Ω–µ—Ç
        ip_address: IP –∞–¥—Ä–µ—Å
    """
    try:
        attempt = LoginAttempt(
            username=username,
            success=success,
            ip_address=ip_address,
            timestamp=datetime.utcnow()
        )
        db.add(attempt)
        db.commit()
        
        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        if success:
            old_attempts = db.query(LoginAttempt).filter(
                and_(
                    LoginAttempt.username == username,
                    LoginAttempt.success == False,
                    LoginAttempt.timestamp < datetime.utcnow() - timedelta(hours=1)
                )
            ).delete()
            db.commit()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {e}")
        db.rollback()


# ===== DEPENDENCIES –î–õ–Ø FASTAPI =====

async def get_current_user(
    token: str = Depends(oauth2_scheme),
    db: Session = Depends(get_db)
) -> User:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    
    Args:
        token: JWT —Ç–æ–∫–µ–Ω
        db: –°–µ—Å—Å–∏—è –ë–î
        
    Returns:
        User: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Raises:
        HTTPException: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        payload = decode_token(token)
        username: str = payload.get("sub")
        token_type: str = payload.get("type")
        
        if username is None or token_type != "access":
            raise credentials_exception
            
    except HTTPException:
        raise credentials_exception
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user(db, username=username)
    if user is None:
        raise credentials_exception
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    try:
        user.last_login = datetime.utcnow()
        db.commit()
    except:
        db.rollback()
    
    return user


async def get_current_active_user(
    current_user: User = Depends(get_current_user)
) -> User:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
    
    Args:
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Returns:
        User: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    """
    if not current_user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )
    return current_user


async def get_admin_user(
    current_user: User = Depends(get_current_user)
) -> User:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Returns:
        User: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    if not current_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    return current_user


def get_client_ip(request: Request) -> Optional[str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
    
    Args:
        request: FastAPI Request –æ–±—ä–µ–∫—Ç
        
    Returns:
        str: IP –∞–¥—Ä–µ—Å –∏–ª–∏ None
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
    forwarded_for = request.headers.get("X-Forwarded-For")
    if forwarded_for:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞
        return forwarded_for.split(",")[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    real_ip = request.headers.get("X-Real-IP")
    if real_ip:
        return real_ip
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º IP –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if request.client:
        return request.client.host
    
    return None


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def create_user(
    db: Session,
    username: str,
    email: str,
    password: str,
    is_admin: bool = False
) -> User:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        db: –°–µ—Å—Å–∏—è –ë–î
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        email: Email
        password: –ü–∞—Ä–æ–ª—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        is_admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        
    Returns:
        User: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    hashed_password = get_password_hash(password)
    
    user = User(
        username=username,
        email=email,
        hashed_password=hashed_password,
        is_admin=is_admin,
        is_active=True
    )
    
    db.add(user)
    db.commit()
    db.refresh(user)
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    return user


def update_user_password(db: Session, user: User, new_password: str) -> None:
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        db: –°–µ—Å—Å–∏—è –ë–î
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        new_password: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    """
    user.hashed_password = get_password_hash(new_password)
    db.commit()
    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
__all__ = [
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä–æ–ª–µ–π
    'verify_password',
    'get_password_hash',
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    'create_access_token',
    'create_refresh_token',
    'decode_token',
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    'get_user',
    'get_user_by_email',
    'authenticate_user',
    'create_user',
    'update_user_password',
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
    'check_login_attempts',
    'record_login_attempt',
    # Dependencies
    'get_current_user',
    'get_current_active_user',
    'get_admin_user',
    # –£—Ç–∏–ª–∏—Ç—ã
    'get_client_ip',
    # –°—Ö–µ–º—ã
    'oauth2_scheme'
]