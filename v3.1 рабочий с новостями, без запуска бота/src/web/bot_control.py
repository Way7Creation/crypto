# src/web/bot_control.py
"""
Bot Control API - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

–ú–æ–¥—É–ª—å: API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π async –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
–°—Ç–∞—Ç—É—Å: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï Event Loop Management
–ò–∑–º–µ–Ω–µ–Ω–∏—è: –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ async –æ–±—Ä–∞–±–æ—Ç–∫–∏, —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ "Event loop is closed"

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
1. –ó–∞–º–µ–Ω–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö asyncio.new_event_loop() –Ω–∞ AsyncRouteHandler
2. –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
3. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ async –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
4. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from flask import jsonify, request

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ò–ú–ü–û–†–¢: –ù–æ–≤—ã–π AsyncRouteHandler
from .async_handler import async_handler

logger = logging.getLogger(__name__)

class BotController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
    
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏:
    - –£–±—Ä–∞–Ω—ã –≤—Å–µ asyncio.new_event_loop() –≤—ã–∑–æ–≤—ã
    - –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º async –∑–∞–¥–∞—á
    - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
    - –†–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    
    def __init__(self, bot_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BotController
        
        Args:
            bot_manager: –≠–∫–∑–µ–º–ø–ª—è—Ä BotManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        """
        self.bot_manager = bot_manager
        self.auto_trading = False
        self.trading_task: Optional[asyncio.Task] = None
        self._shutdown_event = asyncio.Event()
        self._status_lock = asyncio.Lock()
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.controller_stats = {
            'start_time': datetime.utcnow(),
            'total_starts': 0,
            'total_stops': 0,
            'last_error': None,
            'uptime': timedelta(0)
        }
        
        logger.info("üéÆ BotController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            base_status = {
                'is_running': self.auto_trading,
                'status': 'running' if self.auto_trading else 'stopped',
                'active_pairs': getattr(self.bot_manager, 'active_pairs', []),
                'open_positions': 0,
                'positions_details': {},
                'statistics': {
                    'start_time': None,
                    'uptime': None,
                    'cycles_count': 0,
                    'trades_today': 0
                },
                'process_info': {},
                'config': {
                    'mode': 'TESTNET',
                    'max_positions': 1,
                    'human_mode': True,
                    'max_daily_trades': 10
                }
            }
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ bot_manager –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.bot_manager:
                try:
                    manager_status = self.bot_manager.get_status()
                    base_status.update(manager_status)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç bot_manager: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            if self.auto_trading and 'statistics' in base_status:
                base_status['statistics'].update({
                    'controller_uptime': str(datetime.utcnow() - self.controller_stats['start_time']),
                    'total_starts': self.controller_stats['total_starts'],
                    'total_stops': self.controller_stats['total_stops']
                })
            
            return base_status
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'status': 'error',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }
    
    async def start_bot(self, pairs: List[str] = None, strategy: str = 'auto') -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        
        Args:
            pairs: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ['BTCUSDT', 'ETHUSDT'])
            strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'auto')
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        async with self._status_lock:
            try:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ (–ø–∞—Ä—ã: {pairs}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω
                if self.auto_trading:
                    logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞")
                    return {
                        'success': False,
                        'message': '–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω'
                    }
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if pairs is None:
                    pairs = ['BTCUSDT', 'ETHUSDT']
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                self._shutdown_event.clear()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
                self.auto_trading = True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω bot_manager
                if self.bot_manager:
                    await self._update_trading_pairs(pairs)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
                self.trading_task = asyncio.create_task(
                    self._trading_loop(),
                    name="TradingLoop"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.controller_stats['total_starts'] += 1
                self.controller_stats['last_error'] = None
                
                logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                return {
                    'success': True,
                    'message': f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–∏ {pairs} –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {strategy}',
                    'pairs': pairs,
                    'strategy': strategy
                }
                
            except Exception as e:
                self.auto_trading = False
                self.controller_stats['last_error'] = str(e)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
                return {
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}'
                }
    
    async def stop_bot(self) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º async –∑–∞–¥–∞—á–∞–º–∏
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        async with self._status_lock:
            try:
                logger.info("‚èπÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
                
                if not self.auto_trading:
                    logger.info("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return {
                        'success': True,
                        'message': '–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
                    }
                
                # –®–∞–≥ 1: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                self.auto_trading = False
                self._shutdown_event.set()
                
                logger.info("üì¢ –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ—Ä–≥–æ–≤–æ–º—É —Ü–∏–∫–ª—É")
                
                # –®–∞–≥ 2: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –∑–∞–¥–∞—á—É
                if self.trading_task and not self.trading_task.done():
                    logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
                    
                    try:
                        # –î–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–º—É —Ü–∏–∫–ª—É –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        await asyncio.wait_for(self.trading_task, timeout=5.0)
                        logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        
                    except asyncio.TimeoutError:
                        logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                        self.trading_task.cancel()
                        
                        try:
                            await asyncio.wait_for(self.trading_task, timeout=2.0)
                        except (asyncio.CancelledError, asyncio.TimeoutError):
                            logger.info("üõë –¢–æ—Ä–≥–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                    except asyncio.CancelledError:
                        logger.info("üö´ –¢–æ—Ä–≥–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
                # –®–∞–≥ 3: –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
                if self.bot_manager:
                    try:
                        logger.info("üíº –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
                        
                        await asyncio.wait_for(
                            self._safe_close_positions(), 
                            timeout=15.0
                        )
                        
                        logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
                        
                    except asyncio.TimeoutError:
                        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
                
                # –®–∞–≥ 4: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.controller_stats['total_stops'] += 1
                self.controller_stats['last_error'] = None
                
                logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return {
                    'success': True,
                    'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
                }
                
            except Exception as e:
                self.controller_stats['last_error'] = str(e)
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
                
                # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.auto_trading = False
                if self.trading_task:
                    self.trading_task.cancel()
                
                return {
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}'
                }
    
    async def _safe_close_positions(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if hasattr(self.bot_manager, 'close_all_positions'):
                await self.bot_manager.close_all_positions()
            elif hasattr(self.bot_manager, 'positions') and self.bot_manager.positions:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(self.bot_manager.positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _safe_close_positions: {e}")
            raise
    
    async def restart_bot(self) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            stop_result = await self.stop_bot()
            if not stop_result['success']:
                return {
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {stop_result["message"]}'
                }
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –∑–∞–ø—É—Å–∫–æ–º
            logger.info("‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏ –∑–∞–ø—É—Å–∫–æ–º...")
            await asyncio.sleep(3)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            start_result = await self.start_bot()
            
            if start_result['success']:
                logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                return {
                    'success': True,
                    'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω'
                }
            else:
                return {
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {start_result["message"]}'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}'
            }
    
    async def _trading_loop(self):
        """
        –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        logger.info("üìà –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω")
        cycle_count = 0
        
        try:
            while self.auto_trading and not self._shutdown_event.is_set():
                cycle_start = datetime.utcnow()
                cycle_count += 1
                
                try:
                    logger.debug(f"üîÑ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª #{cycle_count}")
                    
                    # 1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                    market_data = await self.analyze_market()
                    
                    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤  
                    signals = await self.generate_signals(market_data)
                    
                    # 3. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
                    if signals:
                        await self.execute_trades(signals)
                    
                    # 4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
                    await self.manage_positions()
                    
                    # 5. –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
                    cycle_duration = (datetime.utcnow() - cycle_start).total_seconds()
                    sleep_time = max(0, 30 - cycle_duration)  # –¶–∏–∫–ª –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    
                    if sleep_time > 0:
                        try:
                            await asyncio.wait_for(
                                self._shutdown_event.wait(), 
                                timeout=sleep_time
                            )
                            # –ï—Å–ª–∏ –¥–æ–∂–¥–∞–ª–∏—Å—å —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –≤—ã—Ö–æ–¥–∏–º
                            break
                        except asyncio.TimeoutError:
                            # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                            pass
                    
                except asyncio.CancelledError:
                    logger.info("üö´ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ #{cycle_count}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å –ø–∞—É–∑–æ–π
                    await asyncio.sleep(5)
                    
        except asyncio.CancelledError:
            logger.info("üõë –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
        finally:
            logger.info(f"üìä –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {cycle_count})")
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –¢–û–†–ì–û–í–û–ì–û –¶–ò–ö–õ–ê ===
    
    async def analyze_market(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.bot_manager and hasattr(self.bot_manager, 'analyze_market'):
            try:
                return await self.bot_manager.analyze_market()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await asyncio.sleep(0.5)
        return {'trend': 'neutral', 'volatility': 'low'}
    
    async def generate_signals(self, market_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if self.bot_manager and hasattr(self.bot_manager, 'generate_signals'):
            try:
                return await self.bot_manager.generate_signals(market_data)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await asyncio.sleep(0.3)
        return []
    
    async def execute_trades(self, signals):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫"""
        logger.info(f"üíº –ò—Å–ø–æ–ª–Ω—è–µ–º {len(signals)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        if self.bot_manager and hasattr(self.bot_manager, 'execute_trades'):
            try:
                return await self.bot_manager.execute_trades(signals)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await asyncio.sleep(1)
    
    async def manage_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        if self.bot_manager and hasattr(self.bot_manager, 'manage_positions'):
            try:
                return await self.bot_manager.manage_positions()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏: {e}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await asyncio.sleep(0.2)
    
    async def _update_trading_pairs(self, pairs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            if self.bot_manager and hasattr(self.bot_manager, 'update_pairs'):
                await self.bot_manager.update_pairs(pairs)
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")


def register_bot_control_routes(app, bot_manager=None):
    """
    –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AsyncRouteHandler
    
    Args:
        app: Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
        
    Returns:
        BotController: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    """
    logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —Å AsyncRouteHandler...")
    
    bot_controller = BotController(bot_manager)
    
    # === –†–û–£–¢–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú ASYNC –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú ===
    
    @app.route('/api/bot/status')
    def get_bot_status_action():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)"""
        try:
            status = bot_controller.get_status()
            return jsonify(status)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return jsonify({
                'status': 'error',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }), 500
    

    @app.route('/api/bot/start', methods=['POST'])
    @async_handler.async_route(timeout=30)
    async def start_bot_action():
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å flexible Content-Type"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ request data
            data = {}
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å JSON data
            if request.is_json:
                try:
                    data = request.get_json() or {}
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            
            # Fallback –Ω–∞ form data –µ—Å–ª–∏ JSON –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if not data and request.form:
                data = {
                    'pairs': request.form.getlist('pairs') or ['BTCUSDT', 'ETHUSDT'],
                    'strategy': request.form.get('strategy', 'auto')
                }
            
            # Fallback –Ω–∞ query parameters
            if not data:
                data = {
                    'pairs': request.args.getlist('pairs') or ['BTCUSDT', 'ETHUSDT'], 
                    'strategy': request.args.get('strategy', 'auto')
                }
            
            # Default values –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            pairs = data.get('pairs', ['BTCUSDT', 'ETHUSDT'])
            strategy = data.get('strategy', 'auto')
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —á—Ç–æ pairs —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if isinstance(pairs, str):
                pairs = [pairs]
            
            logger.info(f"üéØ API –∑–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: –ø–∞—Ä—ã={pairs}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è={strategy}")
            logger.info(f"üìä Request info: Content-Type={request.content_type}, Method={request.method}")
            
            result = await bot_controller.start_bot(pairs, strategy)
            return jsonify(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—É—Å–∫–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e),
                'request_info': {
                    'content_type': request.content_type,
                    'method': request.method,
                    'has_json': request.is_json,
                    'has_form': bool(request.form),
                    'has_args': bool(request.args)
                }
            }), 500
    
    @app.route('/api/bot/stop', methods=['POST'])
    @async_handler.async_route(timeout=20)
    async def stop_bot_action():
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info("üéØ API –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
            logger.info(f"üìä Request info: Content-Type={request.content_type}, Method={request.method}")
            
            result = await bot_controller.stop_bot()
            return jsonify(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e),
                'request_info': {
                    'content_type': request.content_type,
                    'method': request.method
                }
            }), 500
    
    @app.route('/api/bot/restart', methods=['POST'])
    @async_handler.async_route(timeout=60)
    async def restart_bot_action():
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info("üéØ API –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            logger.info(f"üìä Request info: Content-Type={request.content_type}, Method={request.method}")
            
            result = await bot_controller.restart_bot()
            return jsonify(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e),
                'request_info': {
                    'content_type': request.content_type,
                    'method': request.method
                }
            }), 500
    
    @app.route('/api/bot/config', methods=['GET', 'POST'])
    def bot_config_action():
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)"""
        if request.method == 'GET':
            try:
                config = {
                    'auto_trading': bot_controller.auto_trading,
                    'active_pairs': getattr(bot_controller.bot_manager, 'active_pairs', []),
                    'max_positions': 1,
                    'risk_level': 'medium',
                    'strategy': 'auto'
                }
                return jsonify(config)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return jsonify({'error': str(e)}), 500
        
        elif request.method == 'POST':
            try:
                data = request.get_json() or {}
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {data}")
                return jsonify({'success': True, 'message': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞'})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                return jsonify({'error': str(e)}), 500
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AsyncHandler
    @app.route('/api/bot/async_stats')
    def get_async_stats():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AsyncRouteHandler"""
        try:
            stats = async_handler.get_stats()
            return jsonify({
                'success': True,
                'async_handler_stats': stats,
                'timestamp': datetime.utcnow().isoformat()
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AsyncHandler: {e}")
            return jsonify({'error': str(e)}), 500
    
    logger.info("‚úÖ –†–æ—É—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å AsyncRouteHandler")
    return bot_controller
    
    @app.route('/api/bot/start', methods=['OPTIONS'])
    @app.route('/api/bot/stop', methods=['OPTIONS'])
    @app.route('/api/bot/restart', methods=['OPTIONS'])
    def bot_control_options():
        """CORS preflight –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è bot control endpoints"""
        response = jsonify({'status': 'ok'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
        response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
        return response

    logger.info("‚úÖ Bot Control API Content-Type handling –æ–±–Ω–æ–≤–ª–µ–Ω")
    logger.info("üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JSON, Form-Data, Query Parameters")

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = ['BotController', 'register_bot_control_routes']