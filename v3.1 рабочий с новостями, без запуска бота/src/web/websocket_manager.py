# src/web/websocket_manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
WebSocket Manager - Production-Ready —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å threading integration

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
- –ó–∞–º–µ–Ω–∞ asyncio.create_task() –Ω–∞ threading –¥–ª—è Flask —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –í–°–ï–ô —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: Rate limiting, Message queue, Health monitoring
- Production-ready –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å error recovery –∏ metrics

–ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
1. start() –º–µ—Ç–æ–¥ - threading workers –≤–º–µ—Å—Ç–æ asyncio tasks
2. _message_worker() - thread-safe –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ asyncio
3. _cleanup_worker() - threading-based cleanup
4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö advanced –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ —É–ø—Ä–æ—â–µ–Ω–∏—è
"""

import logging
import json
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, Set, Any, Optional, List, Callable
from dataclasses import dataclass, field
from enum import Enum
from collections import defaultdict, deque
from contextlib import contextmanager
import weakref

from flask_socketio import SocketIO, emit, disconnect
from flask import request

logger = logging.getLogger(__name__)

class ConnectionState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    CONNECTING = "connecting"
    CONNECTED = "connected"
    RECONNECTING = "reconnecting"
    DISCONNECTED = "disconnected"
    FAILED = "failed"
    RATE_LIMITED = "rate_limited"

class MessagePriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    LOW = 1
    NORMAL = 2
    HIGH = 3
    CRITICAL = 4

@dataclass
class WebSocketMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è"""
    event: str
    data: Dict[str, Any]
    priority: MessagePriority = MessagePriority.NORMAL
    timestamp: datetime = field(default_factory=datetime.utcnow)
    retry_count: int = 0
    max_retries: int = 3
    ttl_seconds: int = 300  # Time to live
    target_rooms: Optional[List[str]] = None
    target_sids: Optional[List[str]] = None

@dataclass
class ConnectionMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    connect_time: datetime
    last_activity: datetime
    messages_sent: int = 0
    messages_received: int = 0
    errors_count: int = 0
    reconnections: int = 0
    latency_ms: float = 0.0
    
    def update_activity(self):
        self.last_activity = datetime.utcnow()
    
    def add_error(self):
        self.errors_count += 1
    
    def add_reconnection(self):
        self.reconnections += 1

@dataclass
class ConnectionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"""
    sid: str
    state: ConnectionState
    metrics: ConnectionMetrics
    subscriptions: Set[str] = field(default_factory=set)
    user_id: Optional[str] = None
    ip_address: Optional[str] = None
    user_agent: Optional[str] = None
    rate_limit_tokens: int = 100
    last_token_refill: datetime = field(default_factory=datetime.utcnow)

class RateLimiter:
    """Rate limiter –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, max_tokens: int = 100, refill_rate: int = 10):
        """
        Args:
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            refill_rate: –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
        """
        self.max_tokens = max_tokens
        self.refill_rate = refill_rate
    
    def can_send(self, connection: ConnectionInfo) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        now = datetime.utcnow()
        time_passed = (now - connection.last_token_refill).total_seconds()
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
        tokens_to_add = int(time_passed * self.refill_rate)
        if tokens_to_add > 0:
            connection.rate_limit_tokens = min(
                self.max_tokens,
                connection.rate_limit_tokens + tokens_to_add
            )
            connection.last_token_refill = now
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
        if connection.rate_limit_tokens > 0:
            connection.rate_limit_tokens -= 1
            return True
        
        return False

class MessageQueue:
    """–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ retry –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, max_size: int = 1000):
        self.queues = {
            MessagePriority.CRITICAL: deque(),
            MessagePriority.HIGH: deque(),
            MessagePriority.NORMAL: deque(),
            MessagePriority.LOW: deque()
        }
        self.max_size = max_size
        self._lock = threading.Lock()
    
    def add_message(self, message: WebSocketMessage) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        with self._lock:
            queue = self.queues[message.priority]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
            total_size = sum(len(q) for q in self.queues.values())
            if total_size >= self.max_size:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                if self.queues[MessagePriority.LOW]:
                    self.queues[MessagePriority.LOW].popleft()
                elif self.queues[MessagePriority.NORMAL]:
                    self.queues[MessagePriority.NORMAL].popleft()
                else:
                    logger.warning("–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
                    return False
            
            queue.append(message)
            return True
    
    def get_next_message(self) -> Optional[WebSocketMessage]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            for priority in [MessagePriority.CRITICAL, MessagePriority.HIGH, 
                           MessagePriority.NORMAL, MessagePriority.LOW]:
                queue = self.queues[priority]
                if queue:
                    message = queue.popleft()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
                    age = (datetime.utcnow() - message.timestamp).total_seconds()
                    if age > message.ttl_seconds:
                        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ: {message.event}")
                        continue
                    
                    return message
            
            return None
    
    def size(self) -> int:
        """–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏"""
        return sum(len(q) for q in self.queues.values())

class WebSocketManager:
    """
    Production-Ready –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å threading integration
    
    –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
    - Advanced connection management —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    - Rate limiting —Å token bucket –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
    - Priority-based message queue —Å retry –ª–æ–≥–∏–∫–æ–π
    - Health monitoring –∏ automatic cleanup
    - Error recovery –∏ reconnection logic
    - Real-time statistics –∏ performance metrics
    """
    
    def __init__(self, socketio: SocketIO):
        self.socketio = socketio
        self.connections: Dict[str, ConnectionInfo] = {}
        self.subscriptions: Dict[str, Set[str]] = defaultdict(set)  # channel -> set of sids
        self.message_queue = MessageQueue()
        self.rate_limiter = RateLimiter()
        self._running = False
        self._lock = threading.RLock()
        
        # Threading workers - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–º–µ–Ω–∞ asyncio –Ω–∞ threading
        self._message_worker_thread: Optional[threading.Thread] = None
        self._cleanup_worker_thread: Optional[threading.Thread] = None
        self._shutdown_event = threading.Event()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_connections': 0,
            'active_connections': 0,
            'messages_sent': 0,
            'messages_failed': 0,
            'reconnections': 0,
            'rate_limits': 0,
            'start_time': datetime.utcnow()
        }
        
        # Callbacks
        self.on_connect_callbacks: List[Callable] = []
        self.on_disconnect_callbacks: List[Callable] = []
        self.on_message_callbacks: List[Callable] = []
        
        self._setup_socketio_handlers()
        
        logger.info("‚úÖ Production-Ready WebSocketManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _setup_socketio_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ SocketIO —Å–æ–±—ã—Ç–∏–π"""
        
        @self.socketio.on('connect')
        def handle_connect(auth=None):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
            sid = request.sid
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            connection = ConnectionInfo(
                sid=sid,
                state=ConnectionState.CONNECTED,
                metrics=ConnectionMetrics(
                    connect_time=datetime.utcnow(),
                    last_activity=datetime.utcnow()
                ),
                ip_address=request.environ.get('REMOTE_ADDR'),
                user_agent=request.environ.get('HTTP_USER_AGENT')
            )
            
            with self._lock:
                self.connections[sid] = connection
                self.stats['total_connections'] += 1
                self.stats['active_connections'] += 1
            
            logger.info(f"üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {sid} (IP: {connection.ip_address})")
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.on_connect_callbacks:
                try:
                    callback(sid, connection)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ connect callback: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.send_to_connection(sid, 'welcome', {
                'message': 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                'sid': sid,
                'timestamp': datetime.utcnow().isoformat()
            }, MessagePriority.HIGH)
        
        @self.socketio.on('disconnect')
        def handle_disconnect():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
            sid = request.sid
            
            with self._lock:
                if sid in self.connections:
                    connection = self.connections[sid]
                    connection.state = ConnectionState.DISCONNECTED
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                    for channel in list(connection.subscriptions):
                        self._unsubscribe_internal(sid, channel)
                    
                    del self.connections[sid]
                    self.stats['active_connections'] -= 1
                    
                    logger.info(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {sid}")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º callbacks
                    for callback in self.on_disconnect_callbacks:
                        try:
                            callback(sid, connection)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –≤ disconnect callback: {e}")
        
        @self.socketio.on('subscribe')
        def handle_subscribe(data):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
            sid = request.sid
            channel = data.get('channel')
            
            if not channel:
                self.send_error(sid, 'subscribe', '–ù–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏')
                return
            
            success = self.subscribe(sid, channel)
            
            if success:
                self.send_to_connection(sid, 'subscription_success', {
                    'channel': channel,
                    'message': f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {channel} –∞–∫—Ç–∏–≤–Ω–∞'
                })
            else:
                self.send_error(sid, 'subscribe', f'–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel}')
        
        @self.socketio.on('unsubscribe')
        def handle_unsubscribe(data):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
            sid = request.sid
            channel = data.get('channel')
            
            if not channel:
                self.send_error(sid, 'unsubscribe', '–ù–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏')
                return
            
            success = self.unsubscribe(sid, channel)
            
            if success:
                self.send_to_connection(sid, 'unsubscription_success', {
                    'channel': channel,
                    'message': f'–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ {channel} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
                })
        
        @self.socketio.on('ping')
        def handle_ping(data=None):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
            sid = request.sid
            
            with self._lock:
                if sid in self.connections:
                    self.connections[sid].metrics.update_activity()
                    
                    self.send_to_connection(sid, 'pong', {
                        'timestamp': datetime.utcnow().isoformat(),
                        'data': data
                    })
        
        @self.socketio.on('get_status')
        def handle_get_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
            sid = request.sid
            
            with self._lock:
                if sid in self.connections:
                    connection = self.connections[sid]
                    connection.metrics.update_activity()
                    
                    status = {
                        'sid': sid,
                        'state': connection.state.value,
                        'connected_since': connection.metrics.connect_time.isoformat(),
                        'subscriptions': list(connection.subscriptions),
                        'messages_sent': connection.metrics.messages_sent,
                        'messages_received': connection.metrics.messages_received,
                        'errors': connection.metrics.errors_count,
                        'reconnections': connection.metrics.reconnections
                    }
                    
                    self.send_to_connection(sid, 'status_response', status)
    
    def start(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—É—Å–∫ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å threading workers"""
        if self._running:
            logger.warning("WebSocketManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self._running = True
        self._shutdown_event.clear()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫–∞–µ–º threading workers –≤–º–µ—Å—Ç–æ asyncio tasks
        self._message_worker_thread = threading.Thread(
            target=self._message_worker,
            name="WSMessageWorker",
            daemon=True
        )
        
        self._cleanup_worker_thread = threading.Thread(
            target=self._cleanup_worker,
            name="WSCleanupWorker", 
            daemon=True
        )
        
        self._message_worker_thread.start()
        self._cleanup_worker_thread.start()
        
        logger.info("üöÄ Production-Ready WebSocketManager –∑–∞–ø—É—â–µ–Ω")
        logger.info("üì® Message worker –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        logger.info("üßπ Cleanup worker –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self._running = False
        self._shutdown_event.set()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è worker threads
        if self._message_worker_thread and self._message_worker_thread.is_alive():
            self._message_worker_thread.join(timeout=5)
        
        if self._cleanup_worker_thread and self._cleanup_worker_thread.is_alive():
            self._cleanup_worker_thread.join(timeout=5)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        with self._lock:
            for sid in list(self.connections.keys()):
                try:
                    self.socketio.disconnect(sid)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è {sid}: {e}")
        
        logger.info("üõë Production-Ready WebSocketManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _message_worker(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô threading-based worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üì® Message worker –∑–∞–ø—É—â–µ–Ω")
        
        while self._running and not self._shutdown_event.is_set():
            try:
                message = self.message_queue.get_next_message()
                
                if message:
                    success = self._send_message_sync(message)
                    
                    if not success and message.retry_count < message.max_retries:
                        # Retry logic
                        message.retry_count += 1
                        self.message_queue.add_message(message)
                        logger.debug(f"–ü–æ–≤—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.event} (–ø–æ–ø—ã—Ç–∫–∞ {message.retry_count})")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å CPU
                time.sleep(0.01)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ message worker: {e}")
                time.sleep(1)
        
        logger.info("üì® Message worker –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _cleanup_worker(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô threading-based worker –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("üßπ Cleanup worker –∑–∞–ø—É—â–µ–Ω")
        
        while self._running and not self._shutdown_event.wait(60):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            try:
                now = datetime.utcnow()
                inactive_threshold = timedelta(minutes=30)
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                inactive_sids = []
                with self._lock:
                    for sid, connection in self.connections.items():
                        if now - connection.metrics.last_activity > inactive_threshold:
                            inactive_sids.append(sid)
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                for sid in inactive_sids:
                    logger.info(f"üßπ –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {sid}")
                    try:
                        self.socketio.disconnect(sid)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {sid}: {e}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup worker: {e}")
        
        logger.info("üßπ Cleanup worker –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def subscribe(self, sid: str, channel: str) -> bool:
        """–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        with self._lock:
            if sid not in self.connections:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {sid}")
                return False
            
            connection = self.connections[sid]
            connection.subscriptions.add(channel)
            self.subscriptions[channel].add(sid)
            
            logger.debug(f"üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ {sid} –Ω–∞ –∫–∞–Ω–∞–ª {channel}")
            return True
    
    def unsubscribe(self, sid: str, channel: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        with self._lock:
            return self._unsubscribe_internal(sid, channel)
    
    def _unsubscribe_internal(self, sid: str, channel: str) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)"""
        if sid not in self.connections:
            return False
        
        connection = self.connections[sid]
        connection.subscriptions.discard(channel)
        self.subscriptions[channel].discard(sid)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –∫–∞–Ω–∞–ª
        if not self.subscriptions[channel]:
            del self.subscriptions[channel]
        
        logger.debug(f"üì∫‚ùå –û—Ç–ø–∏—Å–∫–∞ {sid} –æ—Ç –∫–∞–Ω–∞–ª–∞ {channel}")
        return True
    
    def send_to_connection(self, sid: str, event: str, data: Dict[str, Any], 
                          priority: MessagePriority = MessagePriority.NORMAL) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é"""
        with self._lock:
            if sid not in self.connections:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é: {sid}")
                return False
        
        message = WebSocketMessage(
            event=event,
            data=data,
            priority=priority,
            target_sids=[sid]
        )
        
        return self.message_queue.add_message(message)
    
    def broadcast_to_channel(self, channel: str, event: str, data: Dict[str, Any],
                           priority: MessagePriority = MessagePriority.NORMAL) -> bool:
        """Broadcast —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞–Ω–∞–ª–∞"""
        with self._lock:
            if channel not in self.subscriptions or not self.subscriptions[channel]:
                logger.debug(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel}")
                return True
            
            target_sids = list(self.subscriptions[channel])
        
        message = WebSocketMessage(
            event=event,
            data=data,
            priority=priority,
            target_sids=target_sids
        )
        
        return self.message_queue.add_message(message)
    
    def broadcast_to_all(self, event: str, data: Dict[str, Any],
                        priority: MessagePriority = MessagePriority.NORMAL) -> bool:
        """Broadcast —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º"""
        with self._lock:
            if not self.connections:
                logger.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è broadcast")
                return True
            
            target_sids = list(self.connections.keys())
        
        message = WebSocketMessage(
            event=event,
            data=data,
            priority=priority,
            target_sids=target_sids
        )
        
        return self.message_queue.add_message(message)
    
    def _send_message_sync(self, message: WebSocketMessage) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        success_count = 0
        total_targets = 0
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            target_sids = message.target_sids or []
            with self._lock:
                if not target_sids:
                    target_sids = list(self.connections.keys())
            
            total_targets = len(target_sids)
            
            for sid in target_sids:
                with self._lock:
                    if sid not in self.connections:
                        continue
                    
                    connection = self.connections[sid]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
                    if not self.rate_limiter.can_send(connection):
                        logger.debug(f"Rate limit –¥–ª—è {sid}")
                        self.stats['rate_limits'] += 1
                        continue
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.socketio.emit(message.event, message.data, room=sid)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    with self._lock:
                        if sid in self.connections:
                            connection = self.connections[sid]
                            connection.metrics.messages_sent += 1
                            connection.metrics.update_activity()
                    
                    success_count += 1
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {sid}: {e}")
                    with self._lock:
                        if sid in self.connections:
                            self.connections[sid].metrics.add_error()
                        self.stats['messages_failed'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            with self._lock:
                self.stats['messages_sent'] += success_count
            
            # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ö–æ—Ç—è –±—ã 80%
            success_rate = success_count / total_targets if total_targets > 0 else 1.0
            return success_rate >= 0.8
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_error(self, sid: str, context: str, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        self.send_to_connection(sid, 'error', {
            'context': context,
            'message': error_message,
            'timestamp': datetime.utcnow().isoformat()
        }, MessagePriority.HIGH)
    
    def get_connection_info(self, sid: str) -> Optional[ConnectionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"""
        with self._lock:
            return self.connections.get(sid)
    
    def get_channel_subscribers(self, channel: str) -> Set[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
        with self._lock:
            return self.subscriptions.get(channel, set()).copy()
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        now = datetime.utcnow()
        
        with self._lock:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            connection_stats = {
                'by_state': defaultdict(int),
                'average_lifetime': 0.0,
                'total_messages': 0,
                'total_errors': 0
            }
            
            if self.connections:
                total_lifetime = 0
                for connection in self.connections.values():
                    connection_stats['by_state'][connection.state.value] += 1
                    total_lifetime += (now - connection.metrics.connect_time).total_seconds()
                    connection_stats['total_messages'] += connection.metrics.messages_sent
                    connection_stats['total_errors'] += connection.metrics.errors_count
                
                connection_stats['average_lifetime'] = total_lifetime / len(self.connections)
            
            stats_copy = self.stats.copy()
            subscriptions_copy = {ch: len(subs) for ch, subs in self.subscriptions.items()}
        
        return {
            **stats_copy,
            'queue_size': self.message_queue.size(),
            'channels': {
                'total': len(subscriptions_copy),
                'active': len([ch for ch, count in subscriptions_copy.items() if count > 0]),
                'subscribers': subscriptions_copy
            },
            'connections': connection_stats,
            'uptime_seconds': (now - stats_copy['start_time']).total_seconds(),
            'timestamp': now.isoformat()
        }
    
    # === CALLBACK SYSTEM ===
    
    def on_connect(self, callback: Callable[[str, ConnectionInfo], None]):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.on_connect_callbacks.append(callback)
    
    def on_disconnect(self, callback: Callable[[str, ConnectionInfo], None]):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è"""
        self.on_disconnect_callbacks.append(callback)
    
    def on_message(self, callback: Callable[[str, str, Dict], None]):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.on_message_callbacks.append(callback)

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ ===

class BotStatusBroadcaster:
    """Production-Ready broadcaster –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ WebSocket"""
    
    def __init__(self, ws_manager: WebSocketManager, bot_manager=None):
        self.ws_manager = ws_manager
        self.bot_manager = bot_manager
        self._running = False
        self._thread: Optional[threading.Thread] = None
        self._shutdown_event = threading.Event()
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ broadcaster'–∞"""
        if self._running:
            return
        
        self._running = True
        self._shutdown_event.clear()
        self._thread = threading.Thread(
            target=self._broadcast_loop,
            name="BotStatusBroadcaster",
            daemon=True
        )
        self._thread.start()
        logger.info("üì° BotStatusBroadcaster –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ broadcaster'–∞"""
        self._running = False
        self._shutdown_event.set()
        
        if self._thread and self._thread.is_alive():
            self._thread.join(timeout=5)
        
        logger.info("üì° BotStatusBroadcaster –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _broadcast_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª broadcast'–∞"""
        while self._running and not self._shutdown_event.wait(10):  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            try:
                if self.bot_manager and self.ws_manager._running:
                    status = self.bot_manager.get_status()
                    
                    self.ws_manager.broadcast_to_channel(
                        'bot_status',
                        'bot_status_update',
                        status,
                        MessagePriority.NORMAL
                    )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ broadcast loop: {e}")

def create_websocket_manager(socketio: SocketIO, bot_manager=None) -> WebSocketManager:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Production-Ready WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
    
    Args:
        socketio: SocketIO —ç–∫–∑–µ–º–ø–ª—è—Ä
        bot_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π WebSocketManager —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    """
    ws_manager = WebSocketManager(socketio)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º bot status broadcaster
    broadcaster = None
    if bot_manager:
        broadcaster = BotStatusBroadcaster(ws_manager, bot_manager)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º broadcaster –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        @ws_manager.on_connect
        def setup_bot_status(sid: str, connection: ConnectionInfo):
            if broadcaster and not broadcaster._running:
                broadcaster.start()
    
    logger.info("‚úÖ Production-Ready WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    return ws_manager

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    'WebSocketManager',
    'ConnectionState', 
    'MessagePriority',
    'WebSocketMessage',
    'ConnectionInfo',
    'BotStatusBroadcaster',
    'create_websocket_manager'
]