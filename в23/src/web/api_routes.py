"""
API —Ä–æ—É—Ç—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞
–§–∞–π–ª: src/web/api_routes.py
"""

import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from fastapi import APIRouter, HTTPException, WebSocket, WebSocketDisconnect, Depends
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel
import pandas as pd
import io
import csv

from ..core.database import get_db_session
from ..core.models import Trade, BotStatus
from ..bot.manager import TradingBotManager
from .dashboard import get_dashboard_html
from ..core.clean_logging import trading_logger, get_clean_logger

logger = get_clean_logger(__name__)

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class BotStartRequest(BaseModel):
    strategy: str
    pairs: Optional[List[str]] = None

class SettingsRequest(BaseModel):
    max_position_size: float
    stop_loss: float
    take_profit: float
    max_daily_trades: int
    trading_pairs: List[str]
    email_notifications: bool = True
    telegram_notifications: bool = False
    telegram_token: Optional[str] = None

class TradeResponse(BaseModel):
    id: int
    timestamp: datetime
    symbol: str
    side: str
    amount: float
    price: float
    profit: float
    strategy: str
    status: str

class StatsResponse(BaseModel):
    total_trades: int
    total_profit: float
    success_rate: float
    active_positions: int
    daily_trades: int
    best_pair: str
    worst_pair: str

# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class WebSocketManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    async def broadcast(self, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.active_connections:
            return
        
        message = json.dumps(data, default=str, ensure_ascii=False)
        disconnected = []
        
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                disconnected.append(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä WebSocket
ws_manager = WebSocketManager()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è API
router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
bot_manager: Optional[TradingBotManager] = None

def set_bot_manager(manager: TradingBotManager):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞"""
    global bot_manager
    bot_manager = manager

@router.get("/", response_class=HTMLResponse)
async def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    return HTMLResponse(get_dashboard_html())

@router.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    await ws_manager.connect(websocket)
    try:
        while True:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            
            if bot_manager:
                status_data = {
                    "type": "bot_status",
                    "status": "active" if bot_manager.is_running else "inactive",
                    "strategy": bot_manager.current_strategy if bot_manager.current_strategy else None,
                    "timestamp": datetime.now()
                }
                await websocket.send_text(json.dumps(status_data, default=str))
    
    except WebSocketDisconnect:
        ws_manager.disconnect(websocket)

@router.get("/api/status")
async def get_bot_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    if not bot_manager:
        return {"status": "inactive", "strategy": None, "message": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
    
    return {
        "status": "active" if bot_manager.is_running else "inactive",
        "strategy": bot_manager.current_strategy,
        "uptime": str(datetime.now() - bot_manager.start_time) if bot_manager.start_time else None,
        "message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç" if bot_manager.is_running else "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    }

@router.post("/api/bot/start")
async def start_bot(request: BotStartRequest):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    if not bot_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        if bot_manager.is_running:
            return {"success": False, "message": "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω"}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        await bot_manager.start_strategy(request.strategy, request.pairs or ["BTCUSDT"])
        
        trading_logger.strategy_started(request.strategy, request.pairs or ["BTCUSDT"])
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
        await ws_manager.broadcast({
            "type": "bot_status",
            "status": "active",
            "strategy": request.strategy,
            "message": f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {request.strategy}"
        })
        
        return {
            "success": True,
            "message": f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '{request.strategy}'"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")

@router.post("/api/bot/stop")
async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
    if not bot_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        if not bot_manager.is_running:
            return {"success": False, "message": "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        strategy_name = bot_manager.current_strategy
        await bot_manager.stop()
        
        trading_logger.strategy_stopped(strategy_name or "unknown", "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
        await ws_manager.broadcast({
            "type": "bot_status", 
            "status": "inactive",
            "strategy": None,
            "message": "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        })
        
        return {"success": True, "message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")

@router.post("/api/bot/restart")
async def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    if not bot_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        strategy = bot_manager.current_strategy or "momentum"
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if bot_manager.is_running:
            await bot_manager.stop()
            await asyncio.sleep(2)  # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        await bot_manager.start_strategy(strategy, ["BTCUSDT"])
        
        return {"success": True, "message": f"–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '{strategy}'"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {str(e)}")

@router.get("/api/stats", response_model=StatsResponse)
async def get_stats(db=Depends(get_db_session)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now() - timedelta(days=30)
        
        trades = db.query(Trade).filter(
            Trade.timestamp >= thirty_days_ago
        ).all()
        
        if not trades:
            return StatsResponse(
                total_trades=0,
                total_profit=0.0,
                success_rate=0.0,
                active_positions=0,
                daily_trades=0,
                best_pair="N/A",
                worst_pair="N/A"
            )
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_trades = len(trades)
        total_profit = sum(trade.profit or 0 for trade in trades)
        profitable_trades = len([t for t in trades if (t.profit or 0) > 0])
        success_rate = (profitable_trades / total_trades * 100) if total_trades > 0 else 0
        
        # –°–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        daily_trades = len([t for t in trades if t.timestamp.date() == today])
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞)
        active_positions = len([t for t in trades if t.status == 'open'])
        
        # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è –ø–∞—Ä–∞
        pair_profits = {}
        for trade in trades:
            symbol = trade.symbol
            if symbol not in pair_profits:
                pair_profits[symbol] = 0
            pair_profits[symbol] += trade.profit or 0
        
        best_pair = max(pair_profits.items(), key=lambda x: x[1])[0] if pair_profits else "N/A"
        worst_pair = min(pair_profits.items(), key=lambda x: x[1])[0] if pair_profits else "N/A"
        
        return StatsResponse(
            total_trades=total_trades,
            total_profit=round(total_profit, 2),
            success_rate=round(success_rate, 1),
            active_positions=active_positions,
            daily_trades=daily_trades,
            best_pair=best_pair,
            worst_pair=worst_pair
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.get("/api/trades")
async def get_trades(limit: int = 50, db=Depends(get_db_session)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
    try:
        trades = db.query(Trade).order_by(
            Trade.timestamp.desc()
        ).limit(limit).all()
        
        return [
            {
                "id": trade.id,
                "timestamp": trade.timestamp,
                "symbol": trade.symbol,
                "side": trade.side,
                "amount": trade.amount,
                "price": trade.price,
                "profit": trade.profit or 0,
                "strategy": trade.strategy,
                "status": trade.status or "completed"
            }
            for trade in trades
        ]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫")

@router.post("/api/settings")
async def save_settings(settings: SettingsRequest):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {settings.dict()}")
        
        # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if bot_manager and bot_manager.is_running:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            if hasattr(bot_manager, 'risk_manager'):
                bot_manager.risk_manager.max_position_size = settings.max_position_size / 100
                bot_manager.risk_manager.stop_loss_percent = settings.stop_loss / 100
                bot_manager.risk_manager.take_profit_percent = settings.take_profit / 100
        
        return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.get("/api/strategies")
async def get_strategies():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    strategies = [
        {
            "name": "momentum",
            "display_name": "Momentum",
            "description": "–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç—Ä–µ–Ω–¥–∞–º –∏ –∏–º–ø—É–ª—å—Å–∞–º —Ü–µ–Ω—ã",
            "type": "aggressive",
            "risk_level": "high"
        },
        {
            "name": "multi_indicator", 
            "display_name": "Multi Indicator",
            "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤",
            "type": "balanced",
            "risk_level": "medium"
        },
        {
            "name": "scalping",
            "display_name": "Scalping", 
            "description": "–ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –º–∞–ª—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö",
            "type": "high_frequency",
            "risk_level": "high"
        },
        {
            "name": "safe_multi_indicator",
            "display_name": "Safe Multi Indicator",
            "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –º—É–ª—å—Ç–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
            "type": "conservative",
            "risk_level": "low"
        },
        {
            "name": "conservative",
            "display_name": "Conservative",
            "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è",
            "type": "conservative", 
            "risk_level": "very_low"
        }
    ]
    
    return strategies

@router.get("/api/export")
async def export_data(format: str = "csv", db=Depends(get_db_session)):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏
        trades = db.query(Trade).order_by(Trade.timestamp.desc()).all()
        
        if format.lower() == "csv":
            # –°–æ–∑–¥–∞–µ–º CSV
            output = io.StringIO()
            writer = csv.writer(output)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                "–í—Ä–µ–º—è", "–°–∏–º–≤–æ–ª", "–°—Ç–æ—Ä–æ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                "–¶–µ–Ω–∞", "–ü—Ä–∏–±—ã–ª—å", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–°—Ç–∞—Ç—É—Å"
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for trade in trades:
                writer.writerow([
                    trade.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
                    trade.symbol,
                    trade.side,
                    trade.amount,
                    trade.price,
                    trade.profit or 0,
                    trade.strategy,
                    trade.status or "completed"
                ])
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
            output.seek(0)
            content = output.getvalue()
            output.close()
            
            from fastapi import Response
            return Response(
                content=content,
                media_type="text/csv",
                headers={"Content-Disposition": f"attachment; filename=crypto_bot_trades_{datetime.now().strftime('%Y%m%d')}.csv"}
            )
        
        else:
            raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç CSV")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")

@router.post("/api/manual/buy")
async def manual_buy(symbol: str, amount: float):
    """–†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞"""
    if not bot_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä—É—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        logger.info(f"üìà –†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {amount} {symbol}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        await ws_manager.broadcast({
            "type": "manual_trade",
            "action": "buy",
            "symbol": symbol,
            "amount": amount,
            "timestamp": datetime.now()
        })
        
        return {"success": True, "message": f"–ü–æ–∫—É–ø–∫–∞ {amount} {symbol} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {str(e)}")

@router.post("/api/manual/sell") 
async def manual_sell(symbol: str, amount: float):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞"""
    if not bot_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
        logger.info(f"üìâ –†—É—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: {amount} {symbol}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        await ws_manager.broadcast({
            "type": "manual_trade",
            "action": "sell", 
            "symbol": symbol,
            "amount": amount,
            "timestamp": datetime.now()
        })
        
        return {"success": True, "message": f"–ü—Ä–æ–¥–∞–∂–∞ {amount} {symbol} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {str(e)}")

@router.post("/api/positions/close_all")
async def close_all_positions():
    """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
    if not bot_manager:
        raise HTTPException(status_code=500, detail="–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        logger.info("üö™ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π")
        
        await ws_manager.broadcast({
            "type": "positions_closed",
            "message": "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã",
            "timestamp": datetime.now()
        })
        
        return {"success": True, "message": "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ bot manager)
async def notify_new_trade(trade_data: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ —á–µ—Ä–µ–∑ WebSocket"""
    await ws_manager.broadcast({
        "type": "new_trade",
        "trade": trade_data,
        "timestamp": datetime.now()
    })

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–æ–≥–∞—Ö (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ logging system)
async def notify_log_message(message: str, level: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    await ws_manager.broadcast({
        "type": "log",
        "message": message,
        "level": level.lower(),
        "timestamp": datetime.now()
    })