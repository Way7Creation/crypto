"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–æ–ª–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–§–∞–π–ª: main.py
"""

import asyncio
import argparse
import signal
import sys
from pathlib import Path
from typing import Optional

import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from src.core.config import Config
from src.core.clean_logging import init_logging_system, get_clean_logger, trading_logger
from src.bot.manager import TradingBotManager
from src.web.api_routes import router as api_router, set_bot_manager, ws_manager
from src.core.database import init_database

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
config = Config()
bot_manager: Optional[TradingBotManager] = None
web_app: Optional[FastAPI] = None
shutdown_event = asyncio.Event()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = None

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    def signal_handler(signum, frame):
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        shutdown_event.set()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

def create_web_app() -> FastAPI:
    """–°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = FastAPI(
        title="üöÄ Crypto Trading Bot Dashboard",
        description="–ü–æ–ª–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–æ–º",
        version="3.0.0",
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    # CORS middleware –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã –¥–∞—à–±–æ—Ä–¥–∞
    app.include_router(api_router)
    
    @app.on_event("startup")
    async def startup_event():
        logger.info("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            await init_database()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    @app.on_event("shutdown")
    async def shutdown_event():
        logger.info("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è...")
    
    return app

async def run_bot_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    global bot_manager
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
        bot_manager = TradingBotManager(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        await bot_manager.start_strategy("momentum", ["BTCUSDT"])
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await shutdown_event.wait()
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –±–æ—Ç–µ: {e}", exc_info=True)
        raise
    finally:
        if bot_manager:
            await bot_manager.stop()
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def run_web_only():
    """–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    global web_app
    
    logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        web_app = create_web_app()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        config_uvicorn = uvicorn.Config(
            app=web_app,
            host="0.0.0.0",
            port=8000,
            log_level="warning",  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ uvicorn
            access_log=False,     # –û—Ç–∫–ª—é—á–∞–µ–º access –ª–æ–≥–∏
            ws_ping_interval=20,
            ws_ping_timeout=10
        )
        
        server = uvicorn.Server(config_uvicorn)
        
        logger.info("üöÄ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8000")
        logger.info("üìä –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await server.serve()
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}", exc_info=True)
        raise

async def run_bot_with_web():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    global bot_manager, web_app
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–±–æ—Ç + –≤–µ–±)...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
        bot_manager = TradingBotManager(config)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –±–æ—Ç–∞ —Å API
        set_bot_manager(bot_manager)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        web_app = create_web_app()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        config_uvicorn = uvicorn.Config(
            app=web_app,
            host="0.0.0.0", 
            port=8000,
            log_level="warning",
            access_log=False,
            ws_ping_interval=20,
            ws_ping_timeout=10
        )
        
        server = uvicorn.Server(config_uvicorn)
        
        logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
        logger.info("üìä –î–∞—à–±–æ—Ä–¥: http://localhost:8000")
        logger.info("üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await server.serve()
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}", exc_info=True)
        raise
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if bot_manager:
            await bot_manager.stop()
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def check_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.BYBIT_API_KEY or config.BYBIT_API_KEY == 'your_testnet_api_key_here':
            logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        from src.strategies.factory import strategy_factory
        strategies = strategy_factory.list_strategies()
        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies)}")
        for strategy in strategies:
            logger.info(f"  üìä {strategy}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            await init_database()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏—Ä–∂—É (—Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
        try:
            from src.exchange.bybit_client import BybitClient
            client = BybitClient(config)
            balance = await client.get_balance()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ: –±–∞–ª–∞–Ω—Å {balance} USDT")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ: {e}")
            return False
        
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def print_startup_banner():
    """–ü–µ—á–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞"""
    banner = """
    
üöÄ =============================================== üöÄ
    
     CRYPTO TRADING BOT v3.0
     –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    
üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
   ‚Ä¢ 5 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π  
   ‚Ä¢ –í–µ–±-–¥–∞—à–±–æ—Ä–¥ —Å –ø–æ–ª–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
   ‚Ä¢ Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
   ‚Ä¢ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   ‚Ä¢ –ß–∏—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    
üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: Momentum, Multi-Indicator, Scalping,
              Safe Multi-Indicator, Conservative
    
üåê –î–∞—à–±–æ—Ä–¥: http://localhost:8000
üìñ API Docs: http://localhost:8000/docs
    
üöÄ =============================================== üöÄ
"""
    print(banner)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global logger
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for directory in ['logs', 'data/cache', 'data/backups']:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="üöÄ Crypto Trading Bot v3.0 - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py              # –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–±–æ—Ç + –≤–µ–±-–¥–∞—à–±–æ—Ä–¥)
  python main.py --bot        # –¢–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç
  python main.py --web        # –¢–æ–ª—å–∫–æ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥  
  python main.py --check      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        """
    )
    
    parser.add_argument('--bot', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞')
    parser.add_argument('--web', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥')
    parser.add_argument('--check', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
                       default='INFO', help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    init_logging_system(args.log_level)
    logger = get_clean_logger("main")
    
    # –ü–µ—á–∞—Ç–∞–µ–º –±–∞–Ω–Ω–µ—Ä
    print_startup_banner()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    setup_signal_handlers()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
    if not config.BYBIT_API_KEY or config.BYBIT_API_KEY == 'your_testnet_api_key_here':
        logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        logger.info("üìù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ BYBIT_API_KEY –≤ —Ñ–∞–π–ª–µ .env")
        sys.exit(1)
    
    if not config.BYBIT_API_SECRET or config.BYBIT_API_SECRET == 'your_testnet_secret_here':
        logger.error("‚ùå Secret –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        logger.info("üìù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ BYBIT_API_SECRET –≤ —Ñ–∞–π–ª–µ .env")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if sum([args.bot, args.web, args.check]) > 1:
        logger.error("‚ùå –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        sys.exit(1)
    
    try:
        if args.check:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            result = asyncio.run(check_system())
            sys.exit(0 if result else 1)
            
        elif args.bot:
            # –¢–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç
            logger.info("ü§ñ –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç")
            asyncio.run(run_bot_only())
            
        elif args.web:
            # –¢–æ–ª—å–∫–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å  
            logger.info("üåê –†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥")
            asyncio.run(run_web_only())
            
        else:
            # –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            logger.info("üöÄ –†–µ–∂–∏–º: –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
            asyncio.run(run_bot_with_web())
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        logger.info("üèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()