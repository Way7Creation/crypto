#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô EXCHANGE CLIENT - –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
–ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ src/exchange/client.py
"""

import ccxt.async_support as ccxt
import asyncio
import logging
import os
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import pandas as pd

from ..core.config import config
from ..logging.smart_logger import get_logger

logger = get_logger(__name__)

class RealExchangeClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∏—Ä–∂–µ–π Bybit
    –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
    """
    
    def __init__(self):
        self.exchange = None
        self.is_connected = False
        self.markets = {}
        self.last_error = None
        
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ"""
        try:
            # API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            api_key = os.getenv('BYBIT_API_KEY')
            api_secret = os.getenv('BYBIT_API_SECRET')
            testnet = os.getenv('BYBIT_TESTNET', 'true').lower() == 'true'
            
            if not api_key or not api_secret:
                raise ValueError("‚ùå API –∫–ª—é—á–∏ Bybit –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CCXT
            exchange_config = {
                'apiKey': api_key,
                'secret': api_secret,
                'enableRateLimit': True,
                'sandbox': testnet,
                'options': {
                    'defaultType': 'spot',
                    'adjustForTimeDifference': True,
                }
            }
            
            # Testnet URLs
            if testnet:
                exchange_config['urls'] = {
                    'api': {
                        'public': 'https://api-testnet.bybit.com',
                        'private': 'https://api-testnet.bybit.com',
                    }
                }
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.exchange = ccxt.bybit(exchange_config)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
            self.markets = await self.exchange.load_markets()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            balance = await self.exchange.fetch_balance()
            
            self.is_connected = True
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Bybit ({'testnet' if testnet else 'mainnet'})")
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.markets)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
            return True
            
        except Exception as e:
            self.last_error = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ: {e}")
            return False
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∏—Ä–∂–∏"""
        if self.exchange:
            await self.exchange.close()
            self.is_connected = False
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –±–∏—Ä–∂–∏")
    
    async def get_ticker(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
        if not self.is_connected:
            logger.error("–ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return None
            
        try:
            ticker = await self.exchange.fetch_ticker(symbol)
            return {
                'symbol': symbol,
                'last': ticker['last'],
                'bid': ticker['bid'],
                'ask': ticker['ask'],
                'high': ticker['high'],
                'low': ticker['low'],
                'volume': ticker['baseVolume'],
                'percentage': ticker['percentage'],
                'timestamp': ticker['timestamp']
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
            return None
    
    async def get_candles(self, symbol: str, timeframe: str = '1h', limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π OHLCV"""
        if not self.is_connected:
            logger.error("–ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return []
            
        try:
            ohlcv = await self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            
            candles = []
            for candle in ohlcv:
                candles.append({
                    'timestamp': candle[0],
                    'datetime': datetime.fromtimestamp(candle[0] / 1000),
                    'open': float(candle[1]),
                    'high': float(candle[2]),
                    'low': float(candle[3]),
                    'close': float(candle[4]),
                    'volume': float(candle[5])
                })
            
            logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({timeframe})")
            return candles
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol}: {e}")
            return []
    
    async def get_candles_df(self, symbol: str, timeframe: str = '1h', limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ DataFrame –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        candles = await self.get_candles(symbol, timeframe, limit)
        
        if not candles:
            return pd.DataFrame()
        
        df = pd.DataFrame(candles)
        df.set_index('datetime', inplace=True)
        df.drop('timestamp', axis=1, inplace=True)
        
        return df
    
    async def get_account_balance(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.is_connected:
            logger.error("–ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return {}
            
        try:
            balance = await self.exchange.fetch_balance()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            formatted_balance = {}
            for currency, data in balance.items():
                if isinstance(data, dict) and data.get('total', 0) > 0:
                    formatted_balance[currency] = {
                        'total': data.get('total', 0),
                        'free': data.get('free', 0),
                        'used': data.get('used', 0)
                    }
            
            return formatted_balance
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {}
    
    async def get_all_markets(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ (–¥–ª—è –∑–∞–º–µ–Ω—ã random.uniform)"""
        if not self.is_connected:
            await self.connect()
        
        try:
            markets = []
            count = 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏ —Å –±–∏—Ä–∂–∏
            exchange_markets = self.exchange.markets if hasattr(self.exchange, 'markets') else {}
            
            for symbol, market in exchange_markets.items():
                if market.get('active') and market.get('spot') and 'USDT' in symbol:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É –≤–º–µ—Å—Ç–æ random.uniform()
                        ticker = await self.exchange.fetch_ticker(symbol)
                        
                        market_data = {
                            'symbol': symbol,
                            'base': market['base'],
                            'quote': market['quote'],
                            'active': True,
                            'type': 'spot',
                            'spot': True,
                            'future': False,
                            'option': False,
                            # –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï (–Ω–µ random!):
                            'price': float(ticker['last']),
                            'volume_24h': float(ticker['baseVolume'] or 0),
                            'change_24h': float(ticker['percentage'] or 0),
                            'high_24h': float(ticker['high'] or ticker['last']),
                            'low_24h': float(ticker['low'] or ticker['last']),
                            'trades_count': int(ticker.get('count', 0))
                        }
                        
                        markets.append(market_data)
                        count += 1
                        
                        # Rate limiting
                        if count % 10 == 0:
                            await asyncio.sleep(0.2)
                            logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤...")
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                        if count >= 200:
                            break
                            
                    except Exception as e:
                        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ {symbol}: {e}")
                        continue
            
            return markets
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤: {e}")
            return []
    
    async def place_order(self, symbol: str, side: str, amount: float, 
                         price: Optional[float] = None, order_type: str = 'market') -> Optional[Dict]:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        if not self.is_connected:
            logger.error("–ë–∏—Ä–∂–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return None
        
        # –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
        if os.getenv('PAPER_TRADING', 'true').lower() == 'true':
            logger.warning("üö´ Paper trading —Ä–µ–∂–∏–º - –æ—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω!")
            return {
                'id': f'paper_{int(datetime.now().timestamp())}',
                'symbol': symbol,
                'side': side,
                'amount': amount,
                'price': price,
                'status': 'paper_trade',
                'timestamp': datetime.now().timestamp()
            }
        
        try:
            if order_type == 'market':
                order = await self.exchange.create_market_order(symbol, side, amount)
            else:
                order = await self.exchange.create_limit_order(symbol, side, amount, price)
            
            logger.info(f"üìä –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {side} {amount} {symbol}")
            return order
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    async def get_order_status(self, order_id: str, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞"""
        if not self.is_connected:
            return None
            
        try:
            order = await self.exchange.fetch_order(order_id, symbol)
            return order
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    def get_connection_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return {
            'connected': self.is_connected,
            'exchange': 'bybit',
            'testnet': os.getenv('BYBIT_TESTNET', 'true').lower() == 'true',
            'markets_loaded': len(self.markets),
            'last_error': self.last_error,
            'timestamp': datetime.now().isoformat()
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_exchange_client = None

async def get_exchange_client() -> RealExchangeClient:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –±–∏—Ä–∂–∏"""
    global _exchange_client
    
    if _exchange_client is None:
        _exchange_client = RealExchangeClient()
        await _exchange_client.connect()
    
    return _exchange_client

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class ExchangeClient:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.real_client = None
    
    async def connect(self):
        self.real_client = await get_exchange_client()
        return self.real_client.is_connected
    
    async def get_ticker(self, symbol: str):
        if not self.real_client:
            await self.connect()
        return await self.real_client.get_ticker(symbol)
    
    async def get_account_balance(self):
        if not self.real_client:
            await self.connect()
        return await self.real_client.get_account_balance()
    
    async def get_candles(self, symbol: str, timeframe: str = '5m', limit: int = 100):
        if not self.real_client:
            await self.connect()
        return await self.real_client.get_candles(symbol, timeframe, limit)