#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–§–∞–π–ª: src/web/bot_control.py

–ò–ù–°–¢–†–£–ö–¶–ò–Ø: 
1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª src/web/bot_control.py
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç—É–¥–∞ –í–°–Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª
"""

from flask import jsonify, request
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class BotController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    
    def __init__(self, bot_manager=None):
        self.bot_manager = bot_manager
        self.auto_trading = False
        self.trading_task = None
        logger.info("ü§ñ BotController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            if not self.bot_manager:
                return {
                    'status': 'error',
                    'is_running': False,
                    'message': 'Bot manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                    'active_pairs': [],
                    'open_positions': 0,
                    'trades_today': 0,
                    'cycles_count': 0,
                    'uptime': 0,
                    'auto_trading': self.auto_trading,
                    'timestamp': datetime.utcnow().isoformat()
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if hasattr(self.bot_manager, 'get_status'):
                try:
                    status = self.bot_manager.get_status()
                    if isinstance(status, dict):
                        # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        status.update({
                            'auto_trading': self.auto_trading,
                            'trading_task_active': self.trading_task is not None and not self.trading_task.done(),
                            'timestamp': datetime.utcnow().isoformat()
                        })
                        return status
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç bot_manager: {e}")
            
            # –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å
            return {
                'status': 'stopped',
                'is_running': False,
                'auto_trading': self.auto_trading,
                'active_pairs': ['BTCUSDT', 'ETHUSDT'],
                'open_positions': 0,
                'trades_today': 0,
                'cycles_count': 0,
                'uptime': 0,
                'timestamp': datetime.utcnow().isoformat()
            }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")
            return {
                'status': 'error',
                'is_running': False,
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }
    
    async def start_bot(self, pairs=None, strategy='auto') -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–∏: {pairs}, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")
            
            if not self.bot_manager:
                logger.warning("Bot manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
                self.auto_trading = True
                self.trading_task = asyncio.create_task(self.demo_trading_loop())
                
                return {
                    'success': True,
                    'message': '–î–µ–º–æ-—Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω',
                    'strategy': strategy,
                    'pairs': pairs or ['BTCUSDT', 'ETHUSDT']
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if pairs:
                if hasattr(self.bot_manager, 'update_pairs'):
                    try:
                        if asyncio.iscoroutinefunction(self.bot_manager.update_pairs):
                            await self.bot_manager.update_pairs(pairs)
                        else:
                            self.bot_manager.update_pairs(pairs)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—ã: {e}")
                else:
                    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã: {pairs}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            if hasattr(self.bot_manager, 'start'):
                try:
                    if asyncio.iscoroutinefunction(self.bot_manager.start):
                        result = await self.bot_manager.start()
                    else:
                        result = self.bot_manager.start()
                    
                    if result:
                        self.auto_trading = True
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
                        self.trading_task = asyncio.create_task(self.trading_loop())
                        
                        return {
                            'success': True,
                            'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
                            'strategy': strategy,
                            'pairs': pairs or ['BTCUSDT', 'ETHUSDT']
                        }
                    else:
                        return {
                            'success': False,
                            'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'
                        }
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ bot_manager: {e}")
                    return {
                        'success': False,
                        'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}'
                    }
            else:
                # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
                self.auto_trading = True
                self.trading_task = asyncio.create_task(self.demo_trading_loop())
                
                return {
                    'success': True,
                    'message': '–î–µ–º–æ-—Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω',
                    'strategy': strategy,
                    'pairs': pairs or ['BTCUSDT', 'ETHUSDT']
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}'
            }
    
    async def stop_bot(self) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            self.auto_trading = False
            
            if self.trading_task and not self.trading_task.done():
                self.trading_task.cancel()
                try:
                    await self.trading_task
                except asyncio.CancelledError:
                    logger.info("–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
            if self.bot_manager and hasattr(self.bot_manager, 'stop'):
                try:
                    if asyncio.iscoroutinefunction(self.bot_manager.stop):
                        await self.bot_manager.stop()
                    else:
                        self.bot_manager.stop()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ bot_manager: {e}")
            
            return {
                'success': True,
                'message': '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}'
            }
    
    async def trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        logger.info("ü§ñ –ó–∞–ø—É—â–µ–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª")
        
        cycle_count = 0
        
        try:
            while self.auto_trading:
                cycle_count += 1
                logger.info(f"üîÑ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª #{cycle_count}")
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
                await self.execute_trading_cycle()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (60 —Å–µ–∫—É–Ω–¥)
                await asyncio.sleep(60)
                
        except asyncio.CancelledError:
            logger.info("–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            logger.info(f"–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ {cycle_count} —Ü–∏–∫–ª–æ–≤")
    
    async def demo_trading_loop(self):
        """–î–µ–º–æ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üéÆ –ó–∞–ø—É—â–µ–Ω –¥–µ–º–æ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª")
        
        cycle_count = 0
        
        try:
            while self.auto_trading:
                cycle_count += 1
                logger.info(f"üéÆ –î–µ–º–æ —Ü–∏–∫–ª #{cycle_count}")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                await self.simulate_market_analysis()
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
                if cycle_count % 5 == 0:  # –ö–∞–∂–¥—ã–π 5-–π —Ü–∏–∫–ª
                    await self.simulate_trade()
                
                # –ü–∞—É–∑–∞ (30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ)
                await asyncio.sleep(30)
                
        except asyncio.CancelledError:
            logger.info("–î–µ–º–æ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ —Ü–∏–∫–ª–µ: {e}")
    
    async def execute_trading_cycle(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            market_data = await self.analyze_market()
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            signals = await self.generate_signals(market_data)
            
            # 3. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
            if signals:
                await self.execute_trades(signals)
            
            # 4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
            await self.manage_positions()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    async def analyze_market(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...")
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
        return {'trend': 'neutral', 'volatility': 'medium'}
    
    async def generate_signals(self, market_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã...")
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        return []
    
    async def execute_trades(self, signals):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫"""
        logger.info(f"üíº –ò—Å–ø–æ–ª–Ω—è–µ–º {len(signals)} —Å–¥–µ–ª–æ–∫...")
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    
    async def manage_positions(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        logger.info("‚öñÔ∏è –£–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—è–º–∏...")
        await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    async def simulate_market_analysis(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        logger.info("üìä [–î–ï–ú–û] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...")
        await asyncio.sleep(2)
    
    async def simulate_trade(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏"""
        logger.info("üí∞ [–î–ï–ú–û] –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é BTCUSDT")
        await asyncio.sleep(1)


def register_bot_control_routes(app, bot_manager=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
    """
    logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º...")
    
    bot_controller = BotController(bot_manager)
    
    @app.route('/api/bot/status')
    def get_bot_status():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            status = bot_controller.get_status()
            return jsonify(status)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return jsonify({
                'status': 'error',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }), 500
    
    @app.route('/api/bot/start', methods=['POST'])
    def start_bot():
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            data = request.get_json() or {}
            pairs = data.get('pairs', ['BTCUSDT', 'ETHUSDT'])
            strategy = data.get('strategy', 'auto')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(
                    bot_controller.start_bot(pairs, strategy)
                )
            finally:
                loop.close()
            
            return jsonify(result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'message': str(e)
            }), 500
    
    @app.route('/api/bot/stop', methods=['POST'])
    def stop_bot():
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(
                    bot_controller.stop_bot()
                )
            finally:
                loop.close()
            
            return jsonify(result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
            return jsonify({
                'success': False,
                'message': str(e)
            }), 500
    
    logger.info("‚úÖ API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("   ü§ñ GET /api/bot/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
    logger.info("   ‚ñ∂Ô∏è POST /api/bot/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    logger.info("   ‚èπÔ∏è POST /api/bot/stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    
    return bot_controller