"""
–§–∞–±—Ä–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ü—É—Ç—å: /var/www/www-root/data/www/systemetech.ru/src/strategies/factory.py
"""
from typing import Dict, Type

# –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
from .base import BaseStrategy

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
from .momentum import MomentumStrategy
from .multi_indicator import MultiIndicatorStrategy
from .scalping import ScalpingStrategy

# –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
try:
    from .safe_multi_indicator import SafeMultiIndicatorStrategy
    SAFE_MULTI_INDICATOR_AVAILABLE = True
except ImportError:
    SAFE_MULTI_INDICATOR_AVAILABLE = False
    print("‚ö†Ô∏è SafeMultiIndicatorStrategy –Ω–µ –Ω–∞–π–¥–µ–Ω")

try:
    from .conservative import ConservativeStrategy
    CONSERVATIVE_AVAILABLE = True
except ImportError:
    CONSERVATIVE_AVAILABLE = False
    print("‚ö†Ô∏è ConservativeStrategy –Ω–µ –Ω–∞–π–¥–µ–Ω")

class StrategyFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
        self._strategies: Dict[str, Type[BaseStrategy]] = {
            'momentum': MomentumStrategy,
            'multi_indicator': MultiIndicatorStrategy, 
            'scalping': ScalpingStrategy
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if SAFE_MULTI_INDICATOR_AVAILABLE:
            self._strategies['safe_multi_indicator'] = SafeMultiIndicatorStrategy
            
        if CONSERVATIVE_AVAILABLE:
            self._strategies['conservative'] = ConservativeStrategy
    
    def create(self, name: str) -> BaseStrategy:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ –∏–º–µ–Ω–∏"""
        if name not in self._strategies:
            available = ', '.join(self._strategies.keys())
            raise ValueError(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: '{name}'. "
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {available}"
            )
        
        strategy_class = self._strategies[name]
        return strategy_class()
    
    def list_strategies(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return list(self._strategies.keys())
    
    def register_strategy(self, name: str, strategy_class: Type[BaseStrategy]):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        if not issubclass(strategy_class, BaseStrategy):
            raise ValueError(
                f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_class.__name__} –¥–æ–ª–∂–Ω–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å BaseStrategy"
            )
        
        self._strategies[name] = strategy_class
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {name}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–±—Ä–∏–∫–∏
strategy_factory = StrategyFactory()

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategy_factory.list_strategies())}")
for strategy_name in strategy_factory.list_strategies():
    print(f"  ‚úÖ {strategy_name}")
