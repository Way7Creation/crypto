#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –≤ Crypto Trading Bot
"""
import os
import sys
from pathlib import Path

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:")
    
    required_files = [
        "main.py",
        "src/__init__.py",
        "src/strategies/__init__.py", 
        "src/strategies/factory.py",
        "src/strategies/base.py",
        "src/strategies/momentum.py",
        "src/strategies/multi_indicator.py",
        "src/strategies/scalping.py",
        "src/bot/__init__.py",
        "src/bot/manager.py",
        "src/core/__init__.py",
        "src/core/config.py",
        "src/core/database.py",
        "src/core/models.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path}")
            missing_files.append(file_path)
    
    return missing_files

def check_python_path():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python path"""
    print("\nüêç Python –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print(f"  Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"  –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {sys.executable}")
    print(f"  –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    packages = ['pandas', 'numpy', 'fastapi', 'sqlalchemy', 'ccxt']
    for package in packages:
        try:
            __import__(package)
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π:")
    
    try:
        sys.path.insert(0, '.')
        from src.core.config import config
        print("  ‚úÖ src.core.config")
    except Exception as e:
        print(f"  ‚ùå src.core.config: {e}")
    
    try:
        from src.strategies.base import BaseStrategy
        print("  ‚úÖ src.strategies.base")
    except Exception as e:
        print(f"  ‚ùå src.strategies.base: {e}")
    
    try:
        from src.strategies.factory import StrategyFactory
        print("  ‚úÖ src.strategies.factory")
    except Exception as e:
        print(f"  ‚ùå src.strategies.factory: {e}")

def check_factory_content():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ factory.py"""
    print("\nüè≠ –ê–Ω–∞–ª–∏–∑ factory.py:")
    
    factory_path = "src/strategies/factory.py"
    if not os.path.exists(factory_path):
        print("  ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    with open(factory_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    issues = []
    
    if 'SafeMultiIndicatorStrategy' in content and 'from .safe_multi_indicator import' not in content:
        issues.append("SafeMultiIndicatorStrategy –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞")
    
    if 'ConservativeStrategy' in content and 'from .conservative import' not in content:
        issues.append("ConservativeStrategy –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞")
    
    if 'class StrategyFactory' not in content:
        issues.append("–ö–ª–∞—Å—Å StrategyFactory –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if issues:
        print("  ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"    - {issue}")
    else:
        print("  ‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

def show_factory_fix():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å factory.py"""
    print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ factory.py:")
    print("""
–ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/strategies/factory.py –Ω–∞:

```python
from typing import Dict, Type
from .base import BaseStrategy
from .momentum import MomentumStrategy
from .multi_indicator import MultiIndicatorStrategy
from .scalping import ScalpingStrategy

class StrategyFactory:
    def __init__(self):
        self._strategies: Dict[str, Type[BaseStrategy]] = {
            'momentum': MomentumStrategy,
            'multi_indicator': MultiIndicatorStrategy, 
            'scalping': ScalpingStrategy
        }
    
    def create(self, name: str) -> BaseStrategy:
        if name not in self._strategies:
            available = ', '.join(self._strategies.keys())
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: '{name}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available}")
        return self._strategies[name]()
    
    def list_strategies(self) -> list:
        return list(self._strategies.keys())

strategy_factory = StrategyFactory()
```
""")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CRYPTO TRADING BOT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    missing_files = check_file_structure()
    check_python_path()
    check_imports()
    check_factory_content()
    
    print("\n" + "=" * 50)
    print("üìã –†–ï–ó–Æ–ú–ï:")
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {len(missing_files)}")
        for file in missing_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  - {file}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
    if os.path.exists("src/strategies/factory.py"):
        with open("src/strategies/factory.py", 'r') as f:
            content = f.read()
        
        if 'SafeMultiIndicatorStrategy' in content and 'try:' not in content:
            print("\nüéØ –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
            print("   factory.py –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SafeMultiIndicatorStrategy")
            print("   –±–µ–∑ —É—Å–ª–æ–≤–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞")
            print("\nüí° –†–ï–®–ï–ù–ò–ï:")
            print("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python quick_fix.py")
    
    show_factory_fix()

if __name__ == "__main__":
    main()