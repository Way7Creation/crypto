# ========================================
# –§–ê–ô–õ: src/bot/manager_improved.py
# –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è BotManager —Å –Ω–∞–¥–µ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
# ========================================

"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
–§–∞–π–ª: src/bot/manager_improved.py
"""

import asyncio
import logging
from typing import Dict, Any, Optional, Tuple
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
from ..core.component_system import component_manager, ComponentStatus

logger = logging.getLogger(__name__)

class ImprovedBotManager:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ —Å –Ω–∞–¥–µ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    - Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.status = "stopped"
        self.start_time = None
        self.active_pairs = []
        self.positions = {}
        self.cycles_count = 0
        self.trades_today = 0
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._register_components()
        
        logger.info("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_components(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
        
        # 1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        component_manager.register_component(
            name="database",
            initializer=self._init_database,
            dependencies=[],
            is_critical=True,
            max_retries=3
        )
        
        # 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        component_manager.register_component(
            name="config",
            initializer=self._init_config,
            dependencies=[],
            is_critical=True,
            max_retries=1
        )
        
        # 3. Exchange –∫–ª–∏–µ–Ω—Ç (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="exchange",
            initializer=self._init_exchange,
            dependencies=["config"],
            is_critical=True,
            max_retries=5
        )
        
        # 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="logging",
            initializer=self._init_logging,
            dependencies=["config"],
            is_critical=False,
            max_retries=2
        )
        
        # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="notifications",
            initializer=self._init_notifications,
            dependencies=["config"],
            is_critical=False,
            max_retries=3
        )
        
        # 6. Market Analyzer (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Exchange)
        component_manager.register_component(
            name="market_analyzer",
            initializer=self._init_market_analyzer,
            dependencies=["exchange"],
            is_critical=True,
            max_retries=3
        )
        
        # 7. Risk Manager (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="risk_manager",
            initializer=self._init_risk_manager,
            dependencies=["config"],
            is_critical=True,
            max_retries=2
        )
        
        # 8. Trader (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Exchange –∏ Risk Manager)
        component_manager.register_component(
            name="trader",
            initializer=self._init_trader,
            dependencies=["exchange", "risk_manager"],
            is_critical=True,
            max_retries=3
        )
        
        # 9. Strategy Factory (–∫—Ä–∏—Ç–∏—á–Ω—ã–π, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        component_manager.register_component(
            name="strategy_factory",
            initializer=self._init_strategy_factory,
            dependencies=["config"],
            is_critical=True,
            max_retries=2
        )
        
        # 10. ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ, –∑–∞–≤–∏—Å—è—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
        component_manager.register_component(
            name="ml_components",
            initializer=self._init_ml_components,
            dependencies=["database", "config"],
            is_critical=False,
            max_retries=2
        )
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # =========================================================================
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¢–û–†–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
    # =========================================================================
    
    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            from ..core.database import SessionLocal
            from sqlalchemy import text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            db = SessionLocal()
            try:
                result = db.execute(text("SELECT 1")).scalar()
                if result != 1:
                    raise Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
                
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
                return db
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    def _init_config(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        try:
            from ..core.config import config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not hasattr(config, 'BYBIT_API_KEY') or not config.BYBIT_API_KEY:
                raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            if not hasattr(config, 'BYBIT_API_SECRET') or not config.BYBIT_API_SECRET:
                raise ValueError("Secret –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return config
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    async def _init_exchange(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exchange –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Exchange –∫–ª–∏–µ–Ω—Ç...")
        
        try:
            from ..exchange.client import get_exchange_client
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            exchange = get_exchange_client()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connection_test = await exchange.test_connection()
            if not connection_test:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ")
            
            logger.info("‚úÖ Exchange –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤")
            return exchange
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Exchange: {e}")
            raise
    
    def _init_logging(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SmartLogger
            try:
                from ..logging.smart_logger import SmartLogger
                smart_logger = SmartLogger(__name__)
                logger.info("‚úÖ SmartLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return smart_logger
            except ImportError:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
                return logging.getLogger(__name__)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
            return logging.getLogger(__name__)
    
    def _init_notifications(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        
        try:
            from ..notifications.telegram import telegram_notifier
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            config = component_manager.get_component("config")
            if hasattr(config, 'TELEGRAM_BOT_TOKEN') and config.TELEGRAM_BOT_TOKEN:
                logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã")
                return telegram_notifier
            else:
                logger.warning("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return None
    
    async def _init_market_analyzer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Market Analyzer...")
        
        try:
            from ..analysis.market_analyzer import MarketAnalyzer
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            analyzer = MarketAnalyzer()
            
            logger.info("‚úÖ Market Analyzer –≥–æ—Ç–æ–≤")
            return analyzer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Market Analyzer: {e}")
            raise
    
    def _init_risk_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("‚öñÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Risk Manager...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            try:
                from ..bot.risk_manager import RiskManager
                risk_manager = RiskManager()
                logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π Risk Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return risk_manager
            except ImportError:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
                from ..risk.simple_risk_manager import SimpleRiskManager
                risk_manager = SimpleRiskManager()
                logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π Risk Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return risk_manager
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Risk Manager: {e}")
            raise
    
    async def _init_trader(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞"""
        logger.info("üíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Trader...")
        
        try:
            from ..bot.trader import Trader
            
            # –ü–æ–ª—É—á–∞–µ–º Exchange –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            exchange = component_manager.get_component("exchange")
            if not exchange:
                raise Exception("Exchange –∫–ª–∏–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å Exchange
            trader = Trader(exchange=exchange)
            
            logger.info("‚úÖ Trader –≥–æ—Ç–æ–≤")
            return trader
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Trader: {e}")
            raise
    
    def _init_strategy_factory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        logger.info("üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Strategy Factory...")
        
        try:
            from ..strategies import strategy_factory
            
            logger.info("‚úÖ Strategy Factory –≥–æ—Ç–æ–≤–∞")
            return strategy_factory
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Strategy Factory: {e}")
            raise
    
    def _init_ml_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
        
        ml_components = {}
        
        # Strategy Selector (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π)
        try:
            from ..strategies.auto_strategy_selector import auto_strategy_selector
            ml_components['strategy_selector'] = auto_strategy_selector
            logger.info("‚úÖ Strategy Selector –≥–æ—Ç–æ–≤")
        except ImportError:
            logger.info("üì¶ Strategy Selector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        # Feature Engineering (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–π)
        try:
            from ..ml.features import FeatureEngineering
            if FeatureEngineering:
                ml_components['feature_engineering'] = FeatureEngineering()
                logger.info("‚úÖ Feature Engineering –≥–æ—Ç–æ–≤")
        except ImportError:
            logger.info("üì¶ Feature Engineering –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        # ML Models (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
        try:
            from ..ml.models import DirectionClassifier, PriceLevelRegressor
            if DirectionClassifier:
                ml_components['classifier'] = DirectionClassifier()
            if PriceLevelRegressor:
                ml_components['regressor'] = PriceLevelRegressor()
            logger.info("‚úÖ ML –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã")
        except ImportError:
            logger.info("üì¶ ML –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        return ml_components
    
    # =========================================================================
    # === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===
    # =========================================================================
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            results = await component_manager.initialize_all()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            critical_components = ['database', 'config', 'exchange', 'market_analyzer', 'risk_manager', 'trader', 'strategy_factory']
            critical_failed = []
            
            for comp in critical_components:
                if not results.get(comp, False):
                    critical_failed.append(comp)
            
            if critical_failed:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {critical_failed}")
                return False
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_component(self, name: str) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        return component_manager.get_component(name)
    
    def get_system_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            Dict: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã
        """
        component_status = component_manager.get_status()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(component_status)
        ready = sum(1 for comp in component_status.values() if comp['status'] == 'ready')
        failed = sum(1 for comp in component_status.values() if comp['status'] == 'failed')
        critical_failed = sum(1 for comp in component_status.values() 
                             if comp['status'] == 'failed' and comp['is_critical'])
        
        return {
            'overall_status': 'healthy' if critical_failed == 0 else 'degraded' if ready > failed else 'unhealthy',
            'components': component_status,
            'statistics': {
                'total_components': total,
                'ready_components': ready,
                'failed_components': failed,
                'critical_failed': critical_failed
            },
            'timestamp': datetime.utcnow().isoformat()
        }
    
    async def restart_component(self, name: str) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        """
        return await component_manager.restart_component(name)
    
    async def graceful_shutdown(self):
        """Graceful –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç.–¥.
        
        logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")

# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º BotManager
def integrate_with_existing_manager():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º BotManager
    """
    # –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π _init_components –º–µ—Ç–æ–¥ BotManager:
    
    improved_init_code = '''
    def _init_components(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        self.improved_manager = ImprovedBotManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        success = asyncio.run(self.improved_manager.initialize())
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.exchange = self.improved_manager.get_component("exchange")
            self.analyzer = self.improved_manager.get_component("market_analyzer")
            self.trader = self.improved_manager.get_component("trader")
            self.risk_manager = self.improved_manager.get_component("risk_manager")
            self.notifier = self.improved_manager.get_component("notifications")
            self.strategy_factory = self.improved_manager.get_component("strategy_factory")
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
            # –û—Ç–∫–∞—Ç –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self._init_components_fallback()
    '''
    
    return improved_init_code