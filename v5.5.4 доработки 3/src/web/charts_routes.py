"""
API —Ä–æ—É—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–§–∞–π–ª: src/web/charts_routes.py

üéØ –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏:
‚úÖ –ë–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –∏ –ø–æ–∑–∏—Ü–∏–∏  
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –∏ –æ–±—ä–µ–º–æ–≤
‚úÖ WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from flask import jsonify, request
from functools import wraps

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
try:
    from ..core.database import SessionLocal
    from ..core.models import Trade, Signal, Balance, TradingPair, Candle
    from ..core.config import config
except ImportError:
    # Fallback –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
    SessionLocal = None
    Trade = Signal = Balance = TradingPair = Candle = None
    config = None

logger = logging.getLogger(__name__)

def login_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        # –í production –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É JWT —Ç–æ–∫–µ–Ω–æ–≤
        auth_header = request.headers.get('Authorization', '')
        if not auth_header and not request.cookies.get('session'):
            return jsonify({
                'success': False,
                'error': 'Authorization required'
            }), 401
        return f(*args, **kwargs)
    return decorated_function

def register_chart_routes(app, bot_manager=None, exchange_client=None):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ API —Ä–æ—É—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        app: Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        bot_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        exchange_client: –ö–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
    """
    
    logger.info("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è API —Ä–æ—É—Ç–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    
    # =================================================================
    # –ë–ê–ó–û–í–´–ï API ENDPOINTS
    # =================================================================
    
    @app.route('/api/balance')
    def get_balance_simple():
        """–ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            if bot_manager and hasattr(bot_manager, 'get_balance'):
                balance_data = bot_manager.get_balance()
                return jsonify({
                    'success': True,
                    'balance': balance_data,
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                return jsonify({
                    'success': True,
                    'balance': {
                        'USDT': 1000.0,
                        'total_value': 1000.0,
                        'available': 950.0,
                        'locked': 50.0
                    },
                    'timestamp': datetime.utcnow().isoformat(),
                    'source': 'demo'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/charts/balance')
    @login_required
    def get_balance_detailed():
        """–î–µ—Ç–∞–ª—å–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if bot_manager:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±–æ—Ç–∞
                status = bot_manager.get_status()
                balance = status.get('balance', {})
                
                return jsonify({
                    'success': True,
                    'balance': {
                        'total_usdt': balance.get('USDT', {}).get('total', 0),
                        'available_usdt': balance.get('USDT', {}).get('free', 0),
                        'locked_usdt': balance.get('USDT', {}).get('used', 0),
                        'total_btc': balance.get('BTC', {}).get('total', 0),
                        'total_value_usd': balance.get('total_value_usd', 0)
                    },
                    'performance': {
                        'daily_pnl': status.get('daily_pnl', 0),
                        'daily_pnl_percent': status.get('daily_pnl_percent', 0),
                        'total_profit': status.get('total_profit', 0),
                        'win_rate': status.get('win_rate', 0)
                    },
                    'timestamp': datetime.utcnow().isoformat()
                })
            else:
                # –î–µ–º–æ –±–∞–ª–∞–Ω—Å
                return jsonify({
                    'success': True,
                    'balance': {
                        'total_usdt': 1000.0,
                        'available_usdt': 950.0,
                        'locked_usdt': 50.0,
                        'total_btc': 0.015,
                        'total_value_usd': 1015.75
                    },
                    'performance': {
                        'daily_pnl': 15.75,
                        'daily_pnl_percent': 1.58,
                        'total_profit': 45.30,
                        'win_rate': 67.5
                    },
                    'timestamp': datetime.utcnow().isoformat(),
                    'source': 'demo'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –¢–û–†–ì–û–í–´–ï –î–ê–ù–ù–´–ï - –°–î–ï–õ–ö–ò –ò –ü–û–ó–ò–¶–ò–ò
    # =================================================================
    
    @app.route('/api/charts/trades')
    @login_required 
    def get_trades_api():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            limit = int(request.args.get('limit', 50))
            offset = int(request.args.get('offset', 0))
            symbol = request.args.get('symbol', '')
            
            if bot_manager and SessionLocal:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                db = SessionLocal()
                try:
                    query = db.query(Trade)
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–º–≤–æ–ª—É
                    if symbol:
                        query = query.filter(Trade.symbol == symbol)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
                    trades = query.order_by(Trade.created_at.desc())\
                                .offset(offset)\
                                .limit(limit)\
                                .all()
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    trades_data = []
                    for trade in trades:
                        trades_data.append({
                            'id': trade.id,
                            'symbol': trade.symbol,
                            'side': trade.side.value if hasattr(trade.side, 'value') else str(trade.side),
                            'quantity': float(trade.quantity) if trade.quantity else 0,
                            'entry_price': float(trade.entry_price) if trade.entry_price else 0,
                            'exit_price': float(trade.exit_price) if trade.exit_price else None,
                            'profit': float(trade.profit) if trade.profit else 0,
                            'profit_percent': float(trade.profit_percent) if trade.profit_percent else 0,
                            'status': trade.status.value if hasattr(trade.status, 'value') else str(trade.status),
                            'strategy': trade.strategy,
                            'created_at': trade.created_at.isoformat() if trade.created_at else None,
                            'closed_at': trade.closed_at.isoformat() if trade.closed_at else None
                        })
                    
                    return jsonify({
                        'success': True,
                        'trades': trades_data,
                        'total': len(trades_data)
                    })
                    
                finally:
                    db.close()
            else:
                # –î–µ–º–æ —Å–¥–µ–ª–∫–∏
                demo_trades = [
                    {
                        'id': 1,
                        'symbol': 'BTCUSDT',
                        'side': 'BUY',
                        'quantity': 0.001,
                        'entry_price': 67500.0,
                        'exit_price': 67800.0,
                        'profit': 0.3,
                        'profit_percent': 0.44,
                        'status': 'CLOSED',
                        'strategy': 'momentum',
                        'created_at': (datetime.utcnow() - timedelta(hours=1)).isoformat(),
                        'closed_at': (datetime.utcnow() - timedelta(minutes=30)).isoformat()
                    },
                    {
                        'id': 2,
                        'symbol': 'ETHUSDT',
                        'side': 'SELL',
                        'quantity': 0.1,
                        'entry_price': 3450.0,
                        'exit_price': 3485.0,
                        'profit': 3.5,
                        'profit_percent': 1.04,
                        'status': 'CLOSED',
                        'strategy': 'multi_indicator',
                        'created_at': (datetime.utcnow() - timedelta(hours=2)).isoformat(),
                        'closed_at': (datetime.utcnow() - timedelta(hours=1)).isoformat()
                    }
                ]
                
                return jsonify({
                    'success': True,
                    'trades': demo_trades,
                    'total': len(demo_trades),
                    'source': 'demo'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/charts/positions')
    @login_required
    def get_positions_api():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if bot_manager:
                status = bot_manager.get_status()
                positions = status.get('open_positions', [])
                
                return jsonify({
                    'success': True,
                    'positions': positions,
                    'count': len(positions)
                })
            else:
                # –î–µ–º–æ –ø–æ–∑–∏—Ü–∏–∏
                demo_positions = [
                    {
                        'symbol': 'BTCUSDT',
                        'side': 'LONG',
                        'size': 0.001,
                        'entry_price': 67500.0,
                        'current_price': 67650.0,
                        'unrealized_pnl': 0.15,
                        'unrealized_pnl_percent': 0.22,
                        'margin': 67.5,
                        'strategy': 'momentum'
                    }
                ]
                
                return jsonify({
                    'success': True,
                    'positions': demo_positions,
                    'count': len(demo_positions),
                    'source': 'demo'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–ï–¢–†–ò–ö–ò
    # =================================================================
    
    @app.route('/api/charts/stats')
    @login_required
    def get_stats_api():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if bot_manager:
                status = bot_manager.get_status()
                
                return jsonify({
                    'success': True,
                    'active_pairs': len(status.get('active_pairs', [])),
                    'open_positions': status.get('open_positions', 0),
                    'trades_today': status.get('trades_today', 0),
                    'cycles_completed': status.get('cycles_completed', 0),
                    'uptime': status.get('uptime', 0),
                    'bot_status': status.get('status', 'stopped'),
                    'start_time': status.get('start_time'),
                    'daily_pnl': status.get('daily_pnl', 0),
                    'win_rate': status.get('win_rate', 0),
                    'total_trades': status.get('total_trades', 0)
                })
            else:
                # –î–µ–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                return jsonify({
                    'success': True,
                    'active_pairs': 3,
                    'open_positions': 2,
                    'trades_today': 8,
                    'cycles_completed': 145,
                    'uptime': 7200,  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    'bot_status': 'running',
                    'start_time': (datetime.utcnow() - timedelta(hours=2)).isoformat(),
                    'daily_pnl': 15.75,
                    'win_rate': 67.5,
                    'total_trades': 24,
                    'source': 'demo'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
    # =================================================================
    
    @app.route('/api/charts/indicators/<symbol>')
    @login_required
    def get_indicators_api(symbol):
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –æ—Ç –±–æ—Ç–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            
            return jsonify({
                'success': True,
                'symbol': symbol,
                'indicators': {
                    'rsi': {
                        'value': 65.3,
                        'signal': 'neutral',
                        'overbought': 70,
                        'oversold': 30
                    },
                    'macd': {
                        'macd': 0.15,
                        'signal': 0.12,
                        'histogram': 0.03,
                        'trend': 'bullish'
                    },
                    'moving_averages': {
                        'sma_20': 67650.0,
                        'sma_50': 67200.0,
                        'ema_12': 67720.0,
                        'ema_26': 67580.0
                    },
                    'bollinger_bands': {
                        'upper': 68200.0,
                        'middle': 67800.0,
                        'lower': 67400.0,
                        'bandwidth': 1.18
                    },
                    'volume': {
                        'current': 1250000,
                        'sma_20': 1200000,
                        'relative': 1.04
                    }
                },
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
    # =================================================================
    
    @app.route('/api/charts/price/<symbol>')
    def get_current_price(symbol):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤–∞–ª—é—Ç—ã"""
        try:
            if exchange_client:
                import asyncio
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä —Å –±–∏—Ä–∂–∏
                    ticker = asyncio.run(exchange_client.fetch_ticker(symbol))
                    
                    return jsonify({
                        'success': True,
                        'symbol': symbol,
                        'price': float(ticker.get('last', 0)),
                        'bid': float(ticker.get('bid', 0)),
                        'ask': float(ticker.get('ask', 0)),
                        'volume': float(ticker.get('baseVolume', 0)),
                        'change_24h': float(ticker.get('percentage', 0)),
                        'high_24h': float(ticker.get('high', 0)),
                        'low_24h': float(ticker.get('low', 0)),
                        'source': 'exchange',
                        'timestamp': datetime.utcnow().isoformat()
                    })
                    
                except Exception as ex:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ –¥–ª—è {symbol}: {ex}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
                    pass
            
            # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
            base_price = 67500.0 if 'BTC' in symbol else 3450.0 if 'ETH' in symbol else 1.0
            
            return jsonify({
                'success': True,
                'symbol': symbol,
                'price': base_price,
                'bid': base_price * 0.999,
                'ask': base_price * 1.001,
                'volume': 1200000,
                'change_24h': 2.5,
                'high_24h': base_price * 1.03,
                'low_24h': base_price * 0.97,
                'source': 'demo',
                'timestamp': datetime.utcnow().isoformat()
            })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/charts/candles/<symbol>')
    def get_candles_data(symbol):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            timeframe = request.args.get('timeframe', '1h')
            limit = int(request.args.get('limit', 100))
            
            if exchange_client:
                import asyncio
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ —Å –±–∏—Ä–∂–∏
                    ohlcv = asyncio.run(exchange_client.fetch_ohlcv(
                        symbol, timeframe, limit=limit
                    ))
                    
                    candles = []
                    for kline in ohlcv:
                        candles.append({
                            'timestamp': kline[0],
                            'open': float(kline[1]),
                            'high': float(kline[2]),
                            'low': float(kline[3]),
                            'close': float(kline[4]),
                            'volume': float(kline[5])
                        })
                    
                    return jsonify({
                        'success': True,
                        'symbol': symbol,
                        'timeframe': timeframe,
                        'candles': candles,
                        'source': 'exchange'
                    })
                    
                except Exception as ex:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —Å –±–∏—Ä–∂–∏: {ex}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º–∏
                    pass
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ —Å–≤–µ—á–∏
            base_price = 67500.0 if 'BTC' in symbol else 3450.0
            candles = []
            
            for i in range(limit):
                timestamp = int((datetime.utcnow() - timedelta(hours=limit-i)).timestamp() * 1000)
                # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
                price_change = (i % 10 - 5) * base_price * 0.001
                open_price = base_price + price_change
                high_price = open_price + abs(price_change) * 1.5
                low_price = open_price - abs(price_change) * 1.2
                close_price = open_price + price_change * 0.8
                
                candles.append({
                    'timestamp': timestamp,
                    'open': round(open_price, 2),
                    'high': round(high_price, 2),
                    'low': round(low_price, 2),
                    'close': round(close_price, 2),
                    'volume': round(1000000 + (i % 5) * 200000)
                })
            
            return jsonify({
                'success': True,
                'symbol': symbol,
                'timeframe': timeframe,
                'candles': candles,
                'source': 'demo'
            })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # TRADING PAIRS –ò MARKET DATA
    # =================================================================
    
    @app.route('/api/charts/pairs')
    def get_trading_pairs():
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            if bot_manager:
                status = bot_manager.get_status()
                pairs = status.get('active_pairs', [])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
                pairs_data = []
                for pair in pairs:
                    pairs_data.append({
                        'symbol': pair,
                        'base': pair.replace('USDT', '').replace('BUSD', ''),
                        'quote': 'USDT',
                        'status': 'active'
                    })
                
                return jsonify({
                    'success': True,
                    'pairs': pairs_data,
                    'count': len(pairs_data)
                })
            else:
                # –î–µ–º–æ –ø–∞—Ä—ã
                demo_pairs = [
                    {'symbol': 'BTCUSDT', 'base': 'BTC', 'quote': 'USDT', 'status': 'active'},
                    {'symbol': 'ETHUSDT', 'base': 'ETH', 'quote': 'USDT', 'status': 'active'},
                    {'symbol': 'ADAUSDT', 'base': 'ADA', 'quote': 'USDT', 'status': 'active'}
                ]
                
                return jsonify({
                    'success': True,
                    'pairs': demo_pairs,
                    'count': len(demo_pairs),
                    'source': 'demo'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # SIGNALS –ò –°–¢–†–ê–¢–ï–ì–ò–ò
    # =================================================================
    
    @app.route('/api/charts/signals')
    @login_required
    def get_signals_api():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            limit = int(request.args.get('limit', 20))
            symbol = request.args.get('symbol', '')
            
            if bot_manager and SessionLocal:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –ë–î
                db = SessionLocal()
                try:
                    query = db.query(Signal)
                    
                    if symbol:
                        query = query.filter(Signal.symbol == symbol)
                    
                    signals = query.order_by(Signal.created_at.desc())\
                                  .limit(limit)\
                                  .all()
                    
                    signals_data = []
                    for signal in signals:
                        signals_data.append({
                            'id': signal.id,
                            'symbol': signal.symbol,
                            'type': signal.signal_type.value if hasattr(signal.signal_type, 'value') else str(signal.signal_type),
                            'action': signal.action.value if hasattr(signal.action, 'value') else str(signal.action),
                            'confidence': float(signal.confidence) if signal.confidence else 0,
                            'price': float(signal.price) if signal.price else 0,
                            'strategy': signal.strategy,
                            'created_at': signal.created_at.isoformat() if signal.created_at else None
                        })
                    
                    return jsonify({
                        'success': True,
                        'signals': signals_data,
                        'count': len(signals_data)
                    })
                    
                finally:
                    db.close()
            else:
                # –î–µ–º–æ —Å–∏–≥–Ω–∞–ª—ã
                demo_signals = [
                    {
                        'id': 1,
                        'symbol': 'BTCUSDT',
                        'type': 'BUY',
                        'action': 'ENTRY',
                        'confidence': 0.75,
                        'price': 67650.0,
                        'strategy': 'momentum',
                        'created_at': (datetime.utcnow() - timedelta(minutes=10)).isoformat()
                    },
                    {
                        'id': 2,
                        'symbol': 'ETHUSDT',
                        'type': 'SELL',
                        'action': 'EXIT',
                        'confidence': 0.82,
                        'price': 3465.0,
                        'strategy': 'multi_indicator',
                        'created_at': (datetime.utcnow() - timedelta(minutes=25)).isoformat()
                    }
                ]
                
                return jsonify({
                    'success': True,
                    'signals': demo_signals,
                    'count': len(demo_signals),
                    'source': 'demo'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # PERFORMANCE –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
    # =================================================================
    
    @app.route('/api/charts/performance')
    @login_required
    def get_performance_api():
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            period = request.args.get('period', '24h')  # 1h, 24h, 7d, 30d
            
            if bot_manager:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                pass
            
            # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            now = datetime.utcnow()
            
            if period == '1h':
                data_points = 60  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                delta = timedelta(minutes=1)
            elif period == '24h':
                data_points = 24  # –ö–∞–∂–¥—ã–π —á–∞—Å
                delta = timedelta(hours=1)
            elif period == '7d':
                data_points = 7   # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
                delta = timedelta(days=1)
            else:  # 30d
                data_points = 30  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
                delta = timedelta(days=1)
            
            performance_data = []
            base_balance = 1000.0
            
            for i in range(data_points):
                timestamp = now - (data_points - i) * delta
                # –°–∏–º—É–ª—è—Ü–∏—è —Ä–æ—Å—Ç–∞ —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
                growth = (i / data_points) * 50 + (i % 7 - 3) * 5
                balance = base_balance + growth
                
                performance_data.append({
                    'timestamp': timestamp.isoformat(),
                    'balance': round(balance, 2),
                    'profit': round(growth, 2),
                    'profit_percent': round((growth / base_balance) * 100, 2)
                })
            
            return jsonify({
                'success': True,
                'period': period,
                'data': performance_data,
                'summary': {
                    'start_balance': base_balance,
                    'current_balance': performance_data[-1]['balance'],
                    'total_profit': performance_data[-1]['profit'],
                    'total_profit_percent': performance_data[-1]['profit_percent'],
                    'max_drawdown': -8.5,
                    'sharpe_ratio': 1.35
                },
                'source': 'demo'
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    # =================================================================
    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–õ–ê–î–ö–ê
    # =================================================================
    
    logger.info("‚úÖ –†–æ—É—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info("   üü¢ GET /api/balance - –ø—Ä–æ—Å—Ç–æ–π –±–∞–ª–∞–Ω—Å")
    logger.info("   üü¢ GET /api/charts/balance - –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    logger.info("   üü¢ GET /api/charts/trades - –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
    logger.info("   üü¢ GET /api/charts/positions - –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    logger.info("   üü¢ GET /api/charts/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
    logger.info("   üü¢ GET /api/charts/indicators/<symbol> - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    logger.info("   üü¢ GET /api/charts/price/<symbol> - —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã")
    logger.info("   üü¢ GET /api/charts/candles/<symbol> - –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
    logger.info("   üü¢ GET /api/charts/pairs - —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
    logger.info("   üü¢ GET /api/charts/signals - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
    logger.info("   üü¢ GET /api/charts/performance - –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    return True

# =================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

def format_currency(value, currency='USDT', decimals=2):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    if currency == 'USDT':
        return f"${value:,.{decimals}f}"
    elif currency == 'BTC':
        return f"‚Çø{value:.8f}"
    else:
        return f"{value:,.{decimals}f} {currency}"

def calculate_percentage_change(old_value, new_value):
    """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    if old_value == 0:
        return 0
    return ((new_value - old_value) / old_value) * 100

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = ['register_chart_routes']