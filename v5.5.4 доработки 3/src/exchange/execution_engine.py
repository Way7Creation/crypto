"""
ORDER EXECUTION ENGINE - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
–§–∞–π–ª: src/exchange/execution_engine.py

üéØ –ò–ù–¢–ï–ì–†–ò–†–£–ï–¢ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Üí –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚Üí –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
‚úÖ –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""
import asyncio
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
import logging

from ..core.database import SessionLocal
from ..models.trade import Trade, TradeStatus, OrderSide
from ..models.signal import Signal, SignalType
from ..strategies.base import TradingSignal
from ..risk.enhanced_risk_manager import get_risk_manager
from ..logging.smart_logger import get_logger
from .real_client import get_real_exchange_client
from .position_manager import get_position_manager, PositionInfo

logger = get_logger(__name__)

class ExecutionStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
    PENDING = "pending"
    VALIDATING = "validating"
    EXECUTING = "executing"
    COMPLETED = "completed"
    FAILED = "failed"
    REJECTED = "rejected"

@dataclass
class ExecutionRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    signal: TradingSignal
    strategy_name: str
    confidence: float
    market_conditions: Dict[str, Any]
    risk_params: Dict[str, Any]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º—ã–µ –ø–æ–ª—è
    quantity: Optional[float] = None
    expected_slippage: Optional[float] = None
    execution_priority: int = 1  # 1-–Ω–∏–∑–∫–∏–π, 5-–≤—ã—Å–æ–∫–∏–π
    
@dataclass
class ExecutionResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
    request: ExecutionRequest
    status: ExecutionStatus
    order_id: Optional[str] = None
    trade_id: Optional[int] = None
    executed_price: Optional[float] = None
    executed_quantity: Optional[float] = None
    slippage: Optional[float] = None
    error_message: Optional[str] = None
    execution_time: Optional[datetime] = None

class OrderExecutionEngine:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    üî• –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –¢–û–†–ì–û–í–õ–ò:
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –°–ò–ì–ù–ê–õ –û–¢     ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  –í–ê–õ–ò–î–ê–¶–ò–Ø       ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   –ò–°–ü–û–õ–ù–ï–ù–ò–ï    ‚îÇ
    ‚îÇ   –°–¢–†–ê–¢–ï–ì–ò–ò     ‚îÇ    ‚îÇ  –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ï–†   ‚îÇ    ‚îÇ   –ù–ê –ë–ò–†–ñ–ï      ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
             ‚îÇ                        ‚îÇ                        ‚îÇ
             ‚ñº                        ‚ñº                        ‚ñº
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ   –†–ê–°–ß–ï–¢        ‚îÇ    ‚îÇ   –ü–†–û–í–ï–†–ö–ê       ‚îÇ    ‚îÇ   –ú–û–ù–ò–¢–û–†–ò–ù–ì    ‚îÇ
    ‚îÇ   –ü–û–ó–ò–¶–ò–ò       ‚îÇ    ‚îÇ   –õ–ò–ö–í–ò–î–ù–û–°–¢–ò    ‚îÇ    ‚îÇ   –ü–û–ó–ò–¶–ò–ò       ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    """
    
    def __init__(self, max_concurrent_executions: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            max_concurrent_executions: –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π
        """
        self.exchange = get_real_exchange_client()
        self.risk_manager = get_risk_manager()
        self.position_manager = get_position_manager()
        
        self.max_concurrent_executions = max_concurrent_executions
        self.execution_queue: asyncio.Queue = asyncio.Queue()
        self.active_executions: Dict[str, ExecutionRequest] = {}
        self.execution_history: List[ExecutionResult] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_executions = 0
        self.successful_executions = 0
        self.failed_executions = 0
        self.rejected_executions = 0
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.emergency_stop = False
        
        logger.info(
            "Order Execution Engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            category='execution',
            max_concurrent=max_concurrent_executions
        )
    
    # =================================================================
    # –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ò–°–ü–û–õ–ù–ï–ù–ò–Ø
    # =================================================================
    
    async def execute_signal(self, signal: TradingSignal, strategy_name: str,
                           confidence: float, market_conditions: Dict[str, Any]) -> ExecutionResult:
        """
        üî• –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –ò–°–ü–û–õ–ù–ï–ù–ò–Ø –¢–û–†–ì–û–í–û–ì–û –°–ò–ì–ù–ê–õ–ê
        
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –°–∏–≥–Ω–∞–ª ‚Üí –í–∞–ª–∏–¥–∞—Ü–∏—è ‚Üí –†–∞—Å—á–µ—Ç—ã ‚Üí –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        Args:
            signal: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ (0-1)
            market_conditions: –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            
        Returns:
            ExecutionResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        start_time = datetime.utcnow()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        request = ExecutionRequest(
            signal=signal,
            strategy_name=strategy_name,
            confidence=confidence,
            market_conditions=market_conditions,
            risk_params={}
        )
        
        logger.info(
            f"üéØ –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
            category='execution',
            symbol=signal.symbol,
            action=signal.action,
            strategy=strategy_name,
            confidence=confidence,
            price=signal.price
        )
        
        try:
            # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
            result = await self._validate_execution_request(request)
            if result.status == ExecutionStatus.REJECTED:
                return result
            
            # 2. –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            result = await self._calculate_position_size(request)
            if result.status == ExecutionStatus.FAILED:
                return result
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
            result = await self._check_liquidity_and_slippage(request)
            if result.status == ExecutionStatus.FAILED:
                return result
            
            # 4. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
            result = await self._execute_order(request)
            if result.status == ExecutionStatus.FAILED:
                return result
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            if result.status == ExecutionStatus.COMPLETED:
                await self._create_trade_record(request, result)
            
            # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_execution_stats(result)
            
            execution_time = (datetime.utcnow() - start_time).total_seconds()
            result.execution_time = start_time
            
            logger.info(
                f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result.status.value}",
                category='execution',
                symbol=signal.symbol,
                status=result.status.value,
                execution_time=execution_time,
                order_id=result.order_id,
                trade_id=result.trade_id
            )
            
            return result
            
        except Exception as e:
            logger.error(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}",
                category='execution',
                symbol=signal.symbol,
                strategy=strategy_name,
                error=str(e)
            )
            
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.FAILED,
                error_message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}",
                execution_time=start_time
            )
    
    async def _validate_execution_request(self, request: ExecutionRequest) -> ExecutionResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.emergency_stop:
                return ExecutionResult(
                    request=request,
                    status=ExecutionStatus.REJECTED,
                    error_message="–ê–∫—Ç–∏–≤–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
                )
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            risk_check, risk_reason = await self.risk_manager.validate_position(
                symbol=request.signal.symbol,
                side=request.signal.action.lower(),
                quantity=1.0,  # –ü–æ–∫–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                price=request.signal.price,
                market_data=request.market_conditions
            )
            
            if not risk_check:
                logger.warning(
                    f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                    category='execution',
                    symbol=request.signal.symbol,
                    reason=risk_reason
                )
                
                self.rejected_executions += 1
                
                return ExecutionResult(
                    request=request,
                    status=ExecutionStatus.REJECTED,
                    error_message=f"–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: {risk_reason}"
                )
            
            logger.debug(
                f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞",
                category='execution',
                symbol=request.signal.symbol
            )
            
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.VALIDATING
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.FAILED,
                error_message=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
            )
    
    async def _calculate_position_size(self, request: ExecutionRequest) -> ExecutionResult:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = await self.exchange.fetch_balance()
            usdt_balance = balance.get('USDT', {}).get('free', 0)
            
            if usdt_balance < 10:  # –ú–∏–Ω–∏–º—É–º $10
                return ExecutionResult(
                    request=request,
                    status=ExecutionStatus.REJECTED,
                    error_message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
                )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–∏—Ä–∂–µ–≤–æ–π –∫–ª–∏–µ–Ω—Ç
            risk_percent = self.risk_manager.risk_params.position_size_percent
            quantity = self.exchange.calculate_position_size(
                symbol=request.signal.symbol,
                balance=usdt_balance,
                risk_percent=risk_percent
            )
            
            if quantity <= 0:
                return ExecutionResult(
                    request=request,
                    status=ExecutionStatus.REJECTED,
                    error_message="–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∑–∞–ø—Ä–æ—Å–µ
            request.quantity = quantity
            
            logger.debug(
                f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω",
                category='execution',
                symbol=request.signal.symbol,
                quantity=quantity,
                balance=usdt_balance,
                risk_percent=risk_percent
            )
            
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.VALIDATING
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.FAILED,
                error_message=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}"
            )
    
    async def _check_liquidity_and_slippage(self, request: ExecutionRequest) -> ExecutionResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è"""
        try:
            symbol = request.signal.symbol
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫
            order_book = await self.exchange.fetch_order_book(symbol, limit=20)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            side = request.signal.action.lower()
            quantity = request.quantity
            
            if side == 'buy':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–º–æ—Ç—Ä–∏–º asks
                asks = order_book['asks']
                total_quantity = 0
                weighted_price = 0
                
                for price, size in asks:
                    if total_quantity >= quantity:
                        break
                    
                    take_quantity = min(size, quantity - total_quantity)
                    weighted_price += price * take_quantity
                    total_quantity += take_quantity
                
                if total_quantity < quantity:
                    return ExecutionResult(
                        request=request,
                        status=ExecutionStatus.REJECTED,
                        error_message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
                    )
                
                avg_execution_price = weighted_price / total_quantity
                
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–º–æ—Ç—Ä–∏–º bids
                bids = order_book['bids']
                total_quantity = 0
                weighted_price = 0
                
                for price, size in bids:
                    if total_quantity >= quantity:
                        break
                    
                    take_quantity = min(size, quantity - total_quantity)
                    weighted_price += price * take_quantity
                    total_quantity += take_quantity
                
                if total_quantity < quantity:
                    return ExecutionResult(
                        request=request,
                        status=ExecutionStatus.REJECTED,
                        error_message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
                    )
                
                avg_execution_price = weighted_price / total_quantity
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            expected_price = request.signal.price
            slippage_percent = abs(avg_execution_price - expected_price) / expected_price * 100
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            max_slippage = 0.5  # 0.5%
            if slippage_percent > max_slippage:
                return ExecutionResult(
                    request=request,
                    status=ExecutionStatus.REJECTED,
                    error_message=f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {slippage_percent:.2f}%"
                )
            
            request.expected_slippage = slippage_percent
            
            logger.debug(
                f"üìà –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞",
                category='execution',
                symbol=symbol,
                expected_slippage=slippage_percent,
                avg_execution_price=avg_execution_price
            )
            
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.VALIDATING
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.FAILED,
                error_message=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}"
            )
    
    async def _execute_order(self, request: ExecutionRequest) -> ExecutionResult:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ"""
        try:
            signal = request.signal
            
            # –ò—Å–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            order = await self.exchange.create_order(
                symbol=signal.symbol,
                order_type='market',  # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ä—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                side=signal.action.lower(),
                amount=request.quantity,
                price=None,  # –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
                stop_loss=signal.stop_loss,
                take_profit=signal.take_profit
            )
            
            if not order.success:
                return ExecutionResult(
                    request=request,
                    status=ExecutionStatus.FAILED,
                    error_message=order.error_message or "–û—Ä–¥–µ—Ä –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
                )
            
            # –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            logger.info(
                f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω",
                category='execution',
                symbol=signal.symbol,
                order_id=order.order_id,
                executed_price=order.average_price,
                executed_quantity=order.filled_quantity,
                slippage=order.slippage
            )
            
            self.successful_executions += 1
            
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.COMPLETED,
                order_id=order.order_id,
                executed_price=order.average_price,
                executed_quantity=order.filled_quantity,
                slippage=order.slippage
            )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            self.failed_executions += 1
            
            return ExecutionResult(
                request=request,
                status=ExecutionStatus.FAILED,
                error_message=f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"
            )
    
    async def _create_trade_record(self, request: ExecutionRequest, 
                                 result: ExecutionResult) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏ –≤ –ë–î"""
        db = SessionLocal()
        try:
            trade = Trade(
                symbol=request.signal.symbol,
                side=OrderSide.BUY if request.signal.action == 'BUY' else OrderSide.SELL,
                quantity=result.executed_quantity,
                entry_price=result.executed_price,
                stop_loss=request.signal.stop_loss,
                take_profit=request.signal.take_profit,
                strategy=request.strategy_name,
                confidence=request.confidence,
                status=TradeStatus.OPEN,
                order_id=result.order_id,
                slippage=result.slippage,
                market_conditions=request.market_conditions,
                created_at=datetime.utcnow()
            )
            
            db.add(trade)
            db.commit()
            db.refresh(trade)
            
            result.trade_id = trade.id
            
            logger.info(
                f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î",
                category='execution',
                trade_id=trade.id,
                symbol=request.signal.symbol
            )
            
            return trade.id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return None
        finally:
            db.close()
    
    def _update_execution_stats(self, result: ExecutionResult):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π"""
        self.total_executions += 1
        self.execution_history.append(result)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏
        if len(self.execution_history) > 1000:
            self.execution_history.pop(0)
    
    # =================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì
    # =================================================================
    
    def get_execution_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π"""
        success_rate = 0
        if self.total_executions > 0:
            success_rate = self.successful_executions / self.total_executions * 100
        
        # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        avg_execution_time = 0
        if self.execution_history:
            execution_times = [
                (r.execution_time - r.request.signal.timestamp).total_seconds()
                for r in self.execution_history
                if r.execution_time and hasattr(r.request.signal, 'timestamp')
            ]
            if execution_times:
                avg_execution_time = sum(execution_times) / len(execution_times)
        
        return {
            'total_executions': self.total_executions,
            'successful_executions': self.successful_executions,
            'failed_executions': self.failed_executions,
            'rejected_executions': self.rejected_executions,
            'success_rate_percent': success_rate,
            'avg_execution_time_seconds': avg_execution_time,
            'emergency_stop': self.emergency_stop
        }
    
    def activate_emergency_stop(self, reason: str = "Manual activation"):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.emergency_stop = True
        
        logger.critical(
            f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê: {reason}",
            category='execution'
        )
    
    def deactivate_emergency_stop(self):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.emergency_stop = False
        
        logger.info(
            "‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            category='execution'
        )
    
    async def close_all_positions_emergency(self) -> bool:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            self.activate_emergency_stop("Emergency close all positions")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Position Manager
            success = await self.position_manager.emergency_close_all()
            
            if success:
                logger.critical(
                    "üö® –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã",
                    category='execution'
                )
            else:
                logger.error(
                    "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π",
                    category='execution'
                )
            
            return success
            
        except Exception as e:
            logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ó–ê–ö–†–´–¢–ò–Ø: {e}")
            return False

# =================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
execution_engine = None

def get_execution_engine() -> OrderExecutionEngine:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
    global execution_engine
    
    if execution_engine is None:
        execution_engine = OrderExecutionEngine()
    
    return execution_engine

def create_execution_engine(**kwargs) -> OrderExecutionEngine:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
    return OrderExecutionEngine(**kwargs)

# –≠–∫—Å–ø–æ—Ä—Ç—ã
__all__ = [
    'OrderExecutionEngine',
    'ExecutionRequest',
    'ExecutionResult', 
    'ExecutionStatus',
    'get_execution_engine',
    'create_execution_engine'
]