"""
üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô StateManager
–£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É 'pmem' object has no attribute 'get'
"""
import logging
import psutil
import os
from typing import Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class StateManager:
    """
    üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    
    def __init__(self):
        self.process_name = "trading_bot.py"
        self._last_check = None
        logger.info("üîß StateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_truth(self) -> Dict[str, Any]:
        """
        üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            bot_process = self._find_bot_process()
            
            if bot_process:
                return {
                    'is_running': True,
                    'pid': bot_process.pid,
                    'memory_mb': round(bot_process.memory_info().rss / 1024 / 1024, 2),
                    'cpu_percent': round(bot_process.cpu_percent(), 2),
                    'started_at': datetime.fromtimestamp(bot_process.create_time()),
                    'status': 'running'
                }
            else:
                return {
                    'is_running': False,
                    'pid': None,
                    'memory_mb': 0,
                    'cpu_percent': 0,
                    'started_at': None,
                    'status': 'stopped'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return {
                'is_running': False,
                'pid': None,
                'memory_mb': 0,
                'cpu_percent': 0,
                'started_at': None,
                'status': 'error',
                'error': str(e)
            }
    
    def _find_bot_process(self):
        """
        üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        """
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å psutil
            for proc in psutil.process_iter():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–ø—Ä—è–º—É—é
                    process_name = proc.name()
                    process_cmdline = proc.cmdline()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞
                    if process_cmdline:
                        for cmd in process_cmdline:
                            if self.process_name in cmd:
                                return proc
                    
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏
                    if 'python' in process_name.lower():
                        if process_cmdline:
                            for cmd in process_cmdline:
                                if 'bot' in cmd.lower() or 'trading' in cmd.lower():
                                    return proc
                                    
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    # –ü—Ä–æ—Ü–µ—Å—Å –º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.pid}: {e}")
                    continue
                    
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return None
    
    async def start_process(self) -> Dict[str, Any]:
        """
        üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        try:
            truth = self.get_truth()
            
            if truth['is_running']:
                return {
                    'success': True,
                    'message': f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {truth['pid']})",
                    'pid': truth['pid'],
                    'already_running': True,
                    'status': 'running'
                }
            
            # TODO: –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞ –≤–∞—à–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
            # –ü—Ä–∏–º–µ—Ä:
            # import subprocess
            # import sys
            # subprocess.Popen([sys.executable, 'src/trading_bot.py'])
            
            logger.warning("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            return {
                'success': False,
                'message': "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –≤ start_process()",
                'details': {
                    'info': '–†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ subprocess.Popen()',
                    'example': 'subprocess.Popen([sys.executable, "your_trading_bot.py"])'
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return {
                'success': False,
                'message': f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}",
                'error': str(e)
            }
    
    async def stop_process(self) -> Dict[str, Any]:
        """
        ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        """
        try:
            bot_process = self._find_bot_process()
            
            if not bot_process:
                return {
                    'success': True,
                    'message': "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    'was_running': False,
                    'status': 'stopped'
                }
            
            pid = bot_process.pid
            
            # –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            bot_process.terminate()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
            try:
                bot_process.wait(timeout=10)
                message = f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: {pid})"
                success = True
            except psutil.TimeoutExpired:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                bot_process.kill()
                message = f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: {pid})"
                success = True
            
            return {
                'success': success,
                'message': message,
                'was_running': True,
                'status': 'stopped'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return {
                'success': False,
                'message': f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}",
                'error': str(e)
            }
    
    def sync_all_to_truth(self) -> Dict[str, Any]:
        """
        üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –∏—Å—Ç–∏–Ω–Ω—ã–º
        """
        try:
            truth = self.get_truth()
            
            return {
                'success': True,
                'message': f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω' if truth['is_running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}",
                'is_running': truth['is_running'],
                'target_state': truth,
                'changed': False,
                'changes': []
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'success': False,
                'error': f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}",
                'is_running': False
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
state_manager = StateManager()