"""
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô unified_bot_manager.py
–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω—ã–π StateManager
"""
import asyncio
import logging
from typing import Dict, List, Any
from datetime import datetime

from .state_manager import state_manager
from .database import SessionLocal
from .models import Trade, TradeStatus

logger = logging.getLogger(__name__)

class UnifiedBotManager:
    """
    üéØ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π StateManager
    """
    
    def __init__(self):
        logger.info("üîß UnifiedBotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_comprehensive_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ StateManager"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            truth = state_manager.get_truth()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            db_stats = self._get_db_stats()
            
            return {
                # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                'process_running': truth['is_running'],
                'manager_running': truth['is_running'],  # –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã
                'synchronized': True,  # StateManager –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                
                # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
                'process_pid': truth['pid'],
                'process_memory': truth['memory_mb'],
                'process_cpu': truth['cpu_percent'],
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
                'active_pairs': db_stats['active_pairs'],
                'open_positions': db_stats['open_positions'],
                'total_trades': db_stats['total_trades'],
                'win_rate': db_stats['win_rate'],
                
                # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                'last_check': datetime.utcnow().isoformat(),
                'status_summary': self._get_status_summary(truth['is_running'])
            }
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'process_running': False,
                'manager_running': False,
                'synchronized': False,
                'error': str(e),
                'status_summary': '–û–®–ò–ë–ö–ê'
            }
    
    async def start_bot(self) -> Dict[str, Any]:
        """üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ StateManager"""
        return await state_manager.start_process()
    
    async def stop_bot(self) -> Dict[str, Any]:
        """‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ StateManager"""
        return await state_manager.stop_process()
    
    def sync_state(self) -> Dict[str, Any]:
        """üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ StateManager"""
        return state_manager.sync_all_to_truth()
    
    def _get_db_stats(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î"""
        db = None
        try:
            db = SessionLocal()
            
            # –°—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_positions = db.query(Trade).filter(
                Trade.status == TradeStatus.OPEN
            ).count()
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
            total_trades = db.query(Trade).count()
            
            # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            profitable_trades = db.query(Trade).filter(
                Trade.status == TradeStatus.CLOSED,
                Trade.profit > 0
            ).count()
            
            closed_trades = db.query(Trade).filter(
                Trade.status == TradeStatus.CLOSED
            ).count()
            
            win_rate = (profitable_trades / closed_trades * 100) if closed_trades > 0 else 0
            
            return {
                'active_pairs': ['BTCUSDT', 'ETHUSDT'],  # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                'open_positions': open_positions,
                'total_trades': total_trades,
                'win_rate': win_rate
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {
                'active_pairs': [],
                'open_positions': 0,
                'total_trades': 0,
                'win_rate': 0
            }
        finally:
            if db:
                db.close()
    
    def _get_status_summary(self, is_running: bool) -> str:
        """üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return "üü¢ –†–ê–ë–û–¢–ê–ï–¢" if is_running else "üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù"
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def update_pairs(self, pairs: List[str]) -> Dict[str, Any]:
        """üí± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return {'success': True, 'pairs': pairs, 'message': f'–ü–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {pairs}'}
    
    async def close_position(self, symbol: str) -> Dict[str, Any]:
        """üì§ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        return {'success': True, 'message': f'–ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞'}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
unified_bot_manager = UnifiedBotManager()