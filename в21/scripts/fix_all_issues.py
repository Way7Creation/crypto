#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞
–ü—É—Ç—å: scripts/fix_all_issues.py
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

def fix_bot_manager():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å SQLAlchemy —Å–µ—Å—Å–∏–µ–π –≤ bot/manager.py"""
    manager_file = 'src/bot/manager.py'
    
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {manager_file}...")
    
    with open(manager_file, 'r') as f:
        content = f.read()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ _save_signal
    old_save_signal = """def _save_signal(self, signal: Signal):
        \"\"\"
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            signal: –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        \"\"\"
        def _save_operation():
            db = SessionLocal()
            try:
                db.add(signal)
                db.commit()
                return True
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        self._safe_db_operation(f"—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}", _save_operation)"""
    
    new_save_signal = """def _save_signal(self, signal: Signal):
        \"\"\"
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            signal: –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        \"\"\"
        def _save_operation():
            db = SessionLocal()
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Signal –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                new_signal = Signal(
                    symbol=signal.symbol,
                    action=signal.action,
                    confidence=signal.confidence,
                    price=signal.price,
                    stop_loss=signal.stop_loss,
                    take_profit=signal.take_profit,
                    strategy=signal.strategy,
                    reason=signal.reason,
                    created_at=signal.created_at
                )
                db.add(new_signal)
                db.commit()
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
                signal.id = new_signal.id
                return True
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        self._safe_db_operation(f"—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}", _save_operation)"""
    
    content = content.replace(old_save_signal, new_save_signal)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ _update_signal_db
    old_update_signal = """def _update_signal_db(self, signal: Signal):
        \"\"\"
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            signal: –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        \"\"\"
        def _update_operation():
            db = SessionLocal()
            try:
                db.merge(signal)
                db.commit()
                return True
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        self._safe_db_operation(f"–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}", _update_operation)"""
    
    new_update_signal = """def _update_signal_db(self, signal: Signal):
        \"\"\"
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            signal: –û–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        \"\"\"
        def _update_operation():
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                db_signal = db.query(Signal).filter(Signal.id == signal.id).first()
                if db_signal:
                    db_signal.executed = signal.executed
                    db_signal.executed_at = signal.executed_at
                    db_signal.trade_id = signal.trade_id
                    db.commit()
                    return True
                else:
                    logger.warning(f"–°–∏–≥–Ω–∞–ª —Å ID {signal.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    return False
            except Exception as e:
                db.rollback()
                raise e
            finally:
                db.close()
        
        self._safe_db_operation(f"–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}", _update_operation)"""
    
    content = content.replace(old_update_signal, new_update_signal)
    
    with open(manager_file, 'w') as f:
        f.write(content)
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω {manager_file}")

def fix_telegram_notifications():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π"""
    telegram_file = 'src/notifications/telegram.py'
    
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º {telegram_file}...")
    
    with open(telegram_file, 'r') as f:
        content = f.read()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º send_error —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å HTML
    old_send_error = """async def send_error(self, error: str):
        \"\"\"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ\"\"\"
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(error) > 500:
            error = error[:497] + "..."
        
        text = f\"\"\"üö® <b>–û—à–∏–±–∫–∞</b>
        
<code>{error}</code>
        
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\"\"\"
        
        await self.send_message(text)"""
    
    new_send_error = """async def send_error(self, error: str):
        \"\"\"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ\"\"\"
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
        if len(error) > 500:
            error = error[:497] + "..."
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML
        error = error.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        
        text = f\"\"\"üö® <b>–û—à–∏–±–∫–∞</b>
        
<code>{error}</code>
        
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\"\"\"
        
        await self.send_message(text)"""
    
    content = content.replace(old_send_error, new_send_error)
    
    with open(telegram_file, 'w') as f:
        f.write(content)
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω {telegram_file}")

def create_safe_strategies():
    """–°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    # 1. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è multi_indicator —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    safe_multi_indicator = '''"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –º—É–ª—å—Ç–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
–ü—É—Ç—å: src/strategies/safe_multi_indicator.py
"""
import pandas as pd
import numpy as np
import ta
from typing import Dict, Any
import logging
import warnings

from .base import BaseStrategy, TradingSignal

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è NumPy
warnings.filterwarnings('ignore', category=RuntimeWarning)

logger = logging.getLogger(__name__)

class SafeMultiIndicatorStrategy(BaseStrategy):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º—É–ª—å—Ç–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    """
    
    def __init__(self):
        super().__init__("safe_multi_indicator")
        self.min_confidence = 0.65
        self.min_indicators_confirm = 3
    
    async def analyze(self, df: pd.DataFrame, symbol: str) -> TradingSignal:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        
        if not self.validate_dataframe(df):
            return TradingSignal('WAIT', 0, 0, reason='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
        
        try:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç NaN –∏ inf
            df = self._clean_dataframe(df)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –∑–∞—â–∏—Ç–æ–π
            indicators = self._safe_calculate_indicators(df)
            
            if not indicators:
                return TradingSignal('WAIT', 0, 0, reason='–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = self._analyze_signals(indicators, df)
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            return self._make_decision(signals, indicators, df)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return TradingSignal('WAIT', 0, 0, reason='–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞')
    
    def _clean_dataframe(self, df: pd.DataFrame) -> pd.DataFrame:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        df = df.copy()
        
        # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ NaN
        df.replace([np.inf, -np.inf], np.nan, inplace=True)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –º–µ—Ç–æ–¥–æ–º forward fill
        df.fillna(method='ffill', inplace=True)
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å NaN, –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        df.fillna(df.mean(), inplace=True)
        
        return df
    
    def _safe_calculate_indicators(self, df: pd.DataFrame) -> Dict:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        indicators = {}
        
        try:
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                
                # RSI
                try:
                    indicators['rsi'] = ta.momentum.rsi(df['close'], window=14).iloc[-1]
                    if pd.isna(indicators['rsi']):
                        indicators['rsi'] = 50.0
                except:
                    indicators['rsi'] = 50.0
                
                # MACD
                try:
                    macd = ta.trend.MACD(df['close'])
                    indicators['macd'] = macd.macd().iloc[-1]
                    indicators['macd_signal'] = macd.macd_signal().iloc[-1]
                    indicators['macd_diff'] = macd.macd_diff().iloc[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
                    for key in ['macd', 'macd_signal', 'macd_diff']:
                        if pd.isna(indicators[key]):
                            indicators[key] = 0.0
                except:
                    indicators['macd'] = 0.0
                    indicators['macd_signal'] = 0.0
                    indicators['macd_diff'] = 0.0
                
                # Bollinger Bands
                try:
                    bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
                    indicators['bb_upper'] = bb.bollinger_hband().iloc[-1]
                    indicators['bb_lower'] = bb.bollinger_lband().iloc[-1]
                    indicators['bb_middle'] = bb.bollinger_mavg().iloc[-1]
                    indicators['bb_percent'] = bb.bollinger_pband().iloc[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
                    current_price = df['close'].iloc[-1]
                    for key in ['bb_upper', 'bb_lower', 'bb_middle']:
                        if pd.isna(indicators[key]):
                            indicators[key] = current_price
                    if pd.isna(indicators['bb_percent']):
                        indicators['bb_percent'] = 0.5
                except:
                    current_price = df['close'].iloc[-1]
                    indicators['bb_upper'] = current_price * 1.02
                    indicators['bb_lower'] = current_price * 0.98
                    indicators['bb_middle'] = current_price
                    indicators['bb_percent'] = 0.5
                
                # EMA
                try:
                    indicators['ema_9'] = ta.trend.ema_indicator(df['close'], window=9).iloc[-1]
                    indicators['ema_21'] = ta.trend.ema_indicator(df['close'], window=21).iloc[-1]
                    indicators['ema_50'] = ta.trend.ema_indicator(df['close'], window=50).iloc[-1]
                except:
                    current_price = df['close'].iloc[-1]
                    indicators['ema_9'] = current_price
                    indicators['ema_21'] = current_price
                    indicators['ema_50'] = current_price
                
                # ADX (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å)
                try:
                    adx = ta.trend.ADXIndicator(df['high'], df['low'], df['close'])
                    indicators['adx'] = adx.adx().iloc[-1]
                    indicators['adx_pos'] = adx.adx_pos().iloc[-1]
                    indicators['adx_neg'] = adx.adx_neg().iloc[-1]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
                    for key in ['adx', 'adx_pos', 'adx_neg']:
                        if pd.isna(indicators[key]):
                            indicators[key] = 0.0
                except:
                    indicators['adx'] = 0.0
                    indicators['adx_pos'] = 0.0
                    indicators['adx_neg'] = 0.0
                
                # ATR
                try:
                    atr = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'])
                    indicators['atr'] = atr.average_true_range().iloc[-1]
                    if pd.isna(indicators['atr']):
                        indicators['atr'] = df['close'].iloc[-1] * 0.02
                except:
                    indicators['atr'] = df['close'].iloc[-1] * 0.02
                
                # Volume
                try:
                    indicators['volume_sma'] = df['volume'].rolling(window=20).mean().iloc[-1]
                    indicators['volume_ratio'] = df['volume'].iloc[-1] / indicators['volume_sma']
                    if pd.isna(indicators['volume_ratio']):
                        indicators['volume_ratio'] = 1.0
                except:
                    indicators['volume_sma'] = df['volume'].mean()
                    indicators['volume_ratio'] = 1.0
                
                # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                indicators['current_price'] = df['close'].iloc[-1]
                
                return indicators
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    def _analyze_signals(self, indicators: Dict, df: pd.DataFrame) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        signals = {
            'buy_signals': [],
            'sell_signals': [],
            'neutral_signals': []
        }
        
        try:
            # RSI —Å–∏–≥–Ω–∞–ª—ã
            if indicators['rsi'] < 30:
                signals['buy_signals'].append(('RSI', '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å', 0.8))
            elif indicators['rsi'] > 70:
                signals['sell_signals'].append(('RSI', '–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å', 0.8))
            
            # MACD —Å–∏–≥–Ω–∞–ª—ã
            if indicators['macd'] > indicators['macd_signal'] and indicators['macd_diff'] > 0:
                signals['buy_signals'].append(('MACD', '–ë—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ', 0.7))
            elif indicators['macd'] < indicators['macd_signal'] and indicators['macd_diff'] < 0:
                signals['sell_signals'].append(('MACD', '–ú–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ', 0.7))
            
            # Bollinger Bands —Å–∏–≥–Ω–∞–ª—ã
            if indicators['bb_percent'] < 0.2:
                signals['buy_signals'].append(('BB', '–¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã', 0.6))
            elif indicators['bb_percent'] > 0.8:
                signals['sell_signals'].append(('BB', '–¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã', 0.6))
            
            # EMA —Ç—Ä–µ–Ω–¥
            if (indicators['ema_9'] > indicators['ema_21'] > indicators['ema_50'] and 
                indicators['current_price'] > indicators['ema_9']):
                signals['buy_signals'].append(('EMA', '–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥', 0.7))
            elif (indicators['ema_9'] < indicators['ema_21'] < indicators['ema_50'] and 
                  indicators['current_price'] < indicators['ema_9']):
                signals['sell_signals'].append(('EMA', '–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥', 0.7))
            
            # ADX —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            if indicators['adx'] > 25:
                if indicators['adx_pos'] > indicators['adx_neg']:
                    signals['buy_signals'].append(('ADX', '–°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥', 0.6))
                else:
                    signals['sell_signals'].append(('ADX', '–°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥', 0.6))
            
            # Volume –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if indicators['volume_ratio'] > 1.5:
                signals['neutral_signals'].append(('Volume', '–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º', 0.5))
            
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return signals
    
    def _make_decision(self, signals: Dict, indicators: Dict, df: pd.DataFrame) -> TradingSignal:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        try:
            buy_score = sum(signal[2] for signal in signals['buy_signals'])
            sell_score = sum(signal[2] for signal in signals['sell_signals'])
            
            buy_count = len(signals['buy_signals'])
            sell_count = len(signals['sell_signals'])
            
            current_price = indicators['current_price']
            atr = indicators['atr']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            if buy_count >= self.min_indicators_confirm and buy_score > sell_score:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
                stop_loss = max(current_price * 0.95, current_price - 2 * atr)
                take_profit = min(current_price * 1.1, current_price + 3 * atr)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ risk/reward
                risk_reward = self.calculate_risk_reward(current_price, stop_loss, take_profit)
                if risk_reward < 1.5:
                    take_profit = current_price + (current_price - stop_loss) * 2
                
                confidence = min(0.95, buy_score / (buy_count * 0.8))
                
                reasons = [f"{sig[0]}: {sig[1]}" for sig in signals['buy_signals']]
                reason = "; ".join(reasons[:3])
                
                return TradingSignal(
                    action='BUY',
                    confidence=confidence,
                    price=current_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    reason=reason,
                    risk_reward_ratio=risk_reward,
                    indicators=indicators
                )
                
            elif sell_count >= self.min_indicators_confirm and sell_score > buy_score:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
                stop_loss = min(current_price * 1.05, current_price + 2 * atr)
                take_profit = max(current_price * 0.9, current_price - 3 * atr)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ risk/reward
                risk_reward = self.calculate_risk_reward(current_price, stop_loss, take_profit)
                if risk_reward < 1.5:
                    take_profit = current_price - (stop_loss - current_price) * 2
                
                confidence = min(0.95, sell_score / (sell_count * 0.8))
                
                reasons = [f"{sig[0]}: {sig[1]}" for sig in signals['sell_signals']]
                reason = "; ".join(reasons[:3])
                
                return TradingSignal(
                    action='SELL',
                    confidence=confidence,
                    price=current_price,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    reason=reason,
                    risk_reward_ratio=risk_reward,
                    indicators=indicators
                )
            
            else:
                reason = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (BUY: {buy_count}, SELL: {sell_count})"
                return TradingSignal(
                    action='WAIT',
                    confidence=0,
                    price=current_price,
                    reason=reason,
                    indicators=indicators
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
            return TradingSignal(
                action='WAIT',
                confidence=0,
                price=df['close'].iloc[-1],
                reason='–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è'
            )
'''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
    with open('src/strategies/safe_multi_indicator.py', 'w', encoding='utf-8') as f:
        f.write(safe_multi_indicator)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è multi_indicator —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    # 2. –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    conservative_strategy = '''"""
–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
–ü—É—Ç—å: src/strategies/conservative.py
"""
import pandas as pd
import numpy as np
import ta
from typing import Dict
import logging

from .base import BaseStrategy, TradingSignal

logger = logging.getLogger(__name__)

class ConservativeStrategy(BaseStrategy):
    """
    –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∂–µ—Å—Ç–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –≤—Ö–æ–¥–∞
    –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∏—Å–∫–∏ –∑–∞ —Å—á–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
    """
    
    def __init__(self):
        super().__init__("conservative")
        self.min_confidence = 0.75  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        self.min_risk_reward = 2.5  # –ú–∏–Ω–∏–º—É–º 1:2.5
        self.max_risk_percent = 1.0  # –ú–∞–∫—Å–∏–º—É–º 1% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    
    async def analyze(self, df: pd.DataFrame, symbol: str) -> TradingSignal:
        """–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏"""
        
        if not self.validate_dataframe(df) or len(df) < 200:
            return TradingSignal('WAIT', 0, 0, reason='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self._calculate_indicators(df)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_condition = self._check_market_conditions(indicators, df)
            
            if market_condition == 'UNSUITABLE':
                return TradingSignal('WAIT', 0, 0, reason='–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è')
            
            # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤—Ö–æ–¥–∞
            entry_signal = self._find_entry_signal(indicators, market_condition)
            
            return entry_signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return TradingSignal('WAIT', 0, 0, reason='–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞')
    
    def _calculate_indicators(self, df: pd.DataFrame) -> Dict:
        """–†–∞—Å—á–µ—Ç –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        indicators = {}
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        indicators['sma_50'] = df['close'].rolling(window=50).mean().iloc[-1]
        indicators['sma_200'] = df['close'].rolling(window=200).mean().iloc[-1]
        
        # RSI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
        indicators['rsi'] = ta.momentum.rsi(df['close'], window=14).iloc[-1]
        
        # ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        atr = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'])
        indicators['atr'] = atr.average_true_range().iloc[-1]
        indicators['atr_percent'] = (indicators['atr'] / df['close'].iloc[-1]) * 100
        
        # –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        indicators['volume_sma'] = df['volume'].rolling(window=50).mean().iloc[-1]
        indicators['volume_trend'] = df['volume'].rolling(window=10).mean().iloc[-1] / indicators['volume_sma']
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
        indicators['resistance'] = df['high'].rolling(window=20).max().iloc[-1]
        indicators['support'] = df['low'].rolling(window=20).min().iloc[-1]
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        indicators['current_price'] = df['close'].iloc[-1]
        
        return indicators
    
    def _check_market_conditions(self, indicators: Dict, df: pd.DataFrame) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –Ω–µ —Ç–æ—Ä–≥—É–µ–º –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if indicators['atr_percent'] > 5:  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å > 5%
            return 'UNSUITABLE'
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
        if indicators['volume_trend'] < 0.5 or indicators['volume_trend'] > 3:
            return 'UNSUITABLE'
        
        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if indicators['current_price'] > indicators['sma_50'] > indicators['sma_200']:
            return 'UPTREND'
        elif indicators['current_price'] < indicators['sma_50'] < indicators['sma_200']:
            return 'DOWNTREND'
        else:
            return 'SIDEWAYS'
    
    def _find_entry_signal(self, indicators: Dict, market_condition: str) -> TradingSignal:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞"""
        
        current_price = indicators['current_price']
        atr = indicators['atr']
        
        # –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ
        if market_condition == 'UPTREND':
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏:
            # 1. RSI –≤—ã—à–µ–ª –∏–∑ –∑–æ–Ω—ã –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (30-40)
            # 2. –¶–µ–Ω–∞ –≤—ã—à–µ SMA50
            # 3. –û—Ç–∫–∞—Ç –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω
            
            if (30 < indicators['rsi'] < 40 and
                current_price > indicators['sma_50'] and
                current_price < indicators['sma_50'] * 1.02):  # –ë–ª–∏–∑–∫–æ –∫ SMA50
                
                # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                stop_loss = indicators['support']  # –°—Ç–æ–ø –ø–æ–¥ —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                take_profit = current_price + (current_price - stop_loss) * 3  # R:R = 1:3
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞
                risk_percent = ((current_price - stop_loss) / current_price) * 100
                if risk_percent > self.max_risk_percent:
                    stop_loss = current_price * (1 - self.max_risk_percent / 100)
                
                risk_reward = self.calculate_risk_reward(current_price, stop_loss, take_profit)
                
                if risk_reward >= self.min_risk_reward:
                    return TradingSignal(
                        action='BUY',
                        confidence=0.8,
                        price=current_price,
                        stop_loss=stop_loss,
                        take_profit=take_profit,
                        reason='–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: –æ—Ç–∫–∞—Ç –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ',
                        risk_reward_ratio=risk_reward,
                        indicators=indicators
                    )
        
        # –°–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ
        elif market_condition == 'DOWNTREND':
            if (60 < indicators['rsi'] < 70 and
                current_price < indicators['sma_50'] and
                current_price > indicators['sma_50'] * 0.98):  # –ë–ª–∏–∑–∫–æ –∫ SMA50
                
                stop_loss = indicators['resistance']
                take_profit = current_price - (stop_loss - current_price) * 3
                
                risk_percent = ((stop_loss - current_price) / current_price) * 100
                if risk_percent > self.max_risk_percent:
                    stop_loss = current_price * (1 + self.max_risk_percent / 100)
                
                risk_reward = self.calculate_risk_reward(current_price, stop_loss, take_profit)
                
                if risk_reward >= self.min_risk_reward:
                    return TradingSignal(
                        action='SELL',
                        confidence=0.8,
                        price=current_price,
                        stop_loss=stop_loss,
                        take_profit=take_profit,
                        reason='–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: –æ—Ç–∫–∞—Ç –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ',
                        risk_reward_ratio=risk_reward,
                        indicators=indicators
                    )
        
        return TradingSignal(
            action='WAIT',
            confidence=0,
            price=current_price,
            reason=f'–ñ–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª–æ–≤–∏–π –≤ {market_condition}'
        )
'''
    
    with open('src/strategies/conservative.py', 'w', encoding='utf-8') as f:
        f.write(conservative_strategy)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è")

def update_factory():
    """–û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    factory_file = 'src/strategies/factory.py'
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open(factory_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    if 'from .safe_multi_indicator import SafeMultiIndicatorStrategy' not in content:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        import_line = "from .scalping import ScalpingStrategy"
        if import_line in content:
            content = content.replace(
                import_line,
                import_line + "\nfrom .safe_multi_indicator import SafeMultiIndicatorStrategy\nfrom .conservative import ConservativeStrategy"
            )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if "'safe_multi_indicator': SafeMultiIndicatorStrategy" not in content:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategies_dict_end = "'scalping': ScalpingStrategy"
        if strategies_dict_end in content:
            content = content.replace(
                strategies_dict_end,
                strategies_dict_end + ",\n        'safe_multi_indicator': SafeMultiIndicatorStrategy,\n        'conservative': ConservativeStrategy"
            )
    
    with open(factory_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

def create_update_sql():
    """–°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î"""
    update_sql = """-- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é
UPDATE trading_pairs 
SET strategy = 'safe_multi_indicator',
    stop_loss_percent = 1.5,
    take_profit_percent = 3.0
WHERE strategy = 'multi_indicator';

-- –î–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
UPDATE trading_pairs 
SET strategy = 'conservative',
    stop_loss_percent = 1.0,
    take_profit_percent = 3.0
WHERE symbol IN ('BTCUSDT', 'ETHUSDT');
"""
    
    with open('update_strategies.sql', 'w') as f:
        f.write(update_sql)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

def main():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú")
    print("=" * 50)
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ë–î
    fix_bot_manager()
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    fix_telegram_notifications()
    
    # 3. –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    create_safe_strategies()
    
    # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–±—Ä–∏–∫—É
    update_factory()
    
    # 5. –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
    create_update_sql()
    
    print("\n‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç: mysql crypto_top_bd_mysql < update_strategies.sql")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞")

if __name__ == "__main__":
    main()